
Build/main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c8 l    d  .text	00000000 .text
08003408 l    d  .rodata	00000000 .rodata
08004f00 l    d  .init_array	00000000 .init_array
08004f08 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000440 l    d  .bss	00000000 .bss
20000fec l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /tmp/ccvdOlny.o
080004c8 l       .text	00000000 LoopCopyDataInit
080004c0 l       .text	00000000 CopyDataInit
080004dc l       .text	00000000 LoopFillZerobss
080004d6 l       .text	00000000 FillZerobss
08000508 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080033f0 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c8 l     F .text	00000000 deregister_tm_clones
080001e8 l     F .text	00000000 register_tm_clones
0800020c l     F .text	00000000 __do_global_dtors_aux
20000440 l       .bss	00000000 completed.6516
08004f08 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000234 l     F .text	00000000 frame_dummy
20000444 l       .bss	00000000 object.6521
08004f04 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 stm32f7xx_it.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_msp.c
00000000 l    df *ABS*	00000000 main.c
08000288 l     F .text	0000001e LED_Thread1
080002a6 l     F .text	00000022 Error_Handler
00000000 l    df *ABS*	00000000 system_stm32f7xx.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal.c
2000045c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f7xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32746g_discovery_sdram.c
20000460 l     O .bss	00000010 Command
20000470 l     O .bss	00000058 dma_handle.11422
200004c8 l     O .bss	00000034 sdramHandle
200004fc l     O .bss	0000001c Timing
20000004 l     O .data	00000001 sdramstatus.11383
00000000 l    df *ABS*	00000000 stm32746g_discovery_lcd.c
0800121c l     F .text	0000007c LL_FillBuffer
20000518 l     O .bss	00000004 ActiveLayer
2000051c l     O .bss	000000a8 hLtdcHandler
200005c4 l     O .bss	00000018 DrawProp
200005dc l     O .bss	00000040 hDma2dHandler
2000061c l     O .bss	00000084 periph_clk_init_struct.11919
00000000 l    df *ABS*	00000000 stm32746g_discovery.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_dma2d.c
08001838 l     F .text	00000080 DMA2D_SetConfig
00000000 l    df *ABS*	00000000 stm32f7xx_hal_ltdc.c
08001ae4 l     F .text	00000112 LTDC_SetConfig
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_dma.c
08002480 l     F .text	0000002c DMA_CalcBaseAndBitshift
08004ee9 l     O .rodata	00000008 flagBitshiftOffset.11418
00000000 l    df *ABS*	00000000 stm32f7xx_hal_sdram.c
00000000 l    df *ABS*	00000000 stm32f7xx_ll_fmc.c
00000000 l    df *ABS*	00000000 cmsis_os.c
00000000 l    df *ABS*	00000000 heap_1.c
200006a0 l     O .bss	00000004 xNextFreeByte
200006a4 l     O .bss	00000004 pucAlignedHeap.11804
200006a8 l     O .bss	00000800 ucHeap
00000000 l    df *ABS*	00000000 port.c
0800284c l     F .text	00000038 prvTaskExitError
08002884 l     F .text	0000001a prvPortStartFirstTask
080028a4 l     F .text	0000000e vPortEnableVFP
080028f4 l       .text	00000000 pxCurrentTCBConst2
080029d0 l       .text	00000000 pxCurrentTCBConst
20000ea8 l     O .bss	00000001 ucMaxSysCallPriority
20000eac l     O .bss	00000004 ulMaxPRIGROUPValue
20000010 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
08002bc0 l     F .text	00000024 prvResetNextTaskUnblockTime
08002be4 l     F .text	00000050 prvAddCurrentTaskToDelayedList
08002c34 l     F .text	000001a4 xTaskGenericCreate.part.4
080031a4 l     F .text	00000078 prvIdleTask
20000eb0 l     O .bss	00000014 xSuspendedTaskList
20000ec4 l     O .bss	00000004 pxDelayedTaskList
20000ec8 l     O .bss	00000004 xSchedulerRunning
20000ecc l     O .bss	00000004 uxTasksDeleted
20000ed0 l     O .bss	00000014 xTasksWaitingTermination
20000ee4 l     O .bss	00000014 xDelayedTaskList2
20000ef8 l     O .bss	00000004 uxPendedTicks
20000efc l     O .bss	000000a0 pxReadyTasksLists
20000f9c l     O .bss	00000004 uxSchedulerSuspended
20000fa0 l     O .bss	00000004 xNumOfOverflows
20000fa8 l     O .bss	00000014 xPendingReadyList
20000fbc l     O .bss	00000004 xTickCount
20000fc0 l     O .bss	00000004 pxOverflowDelayedTaskList
20000fc4 l     O .bss	00000004 uxTaskNumber
20000fc8 l     O .bss	00000014 xDelayedTaskList1
20000014 l     O .data	00000004 xNextTaskUnblockTime
20000fdc l     O .bss	00000004 uxCurrentNumberOfTasks
20000fe0 l     O .bss	00000004 uxTopReadyPriority
20000fe4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08003304 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
08004f0c l       .fini_array	00000000 __fini_array_end
20000440 l       .bss	00000000 __bss_start__
20000fec l       .bss	00000000 __bss_end__
08004f08 l       .fini_array	00000000 __fini_array_start
08004f08 l       .init_array	00000000 __init_array_end
08004f00 l       .init_array	00000000 __preinit_array_end
08004f00 l       .init_array	00000000 __init_array_start
08004f00 l       .init_array	00000000 __preinit_array_start
08000508  w    F .text	00000002 RTC_Alarm_IRQHandler
08003421 g     O .rodata	00000010 APBAHBPrescTable
08000508  w    F .text	00000002 EXTI2_IRQHandler
08000508  w    F .text	00000002 TIM8_CC_IRQHandler
08001434 g     F .text	00000034 BSP_LCD_DrawRect
08000276 g     F .text	00000002 DebugMon_Handler
08000508  w    F .text	00000002 UART8_IRQHandler
08000508  w    F .text	00000002 SPI4_IRQHandler
080024ac g     F .text	00000074 HAL_DMA_Init
08002944 g     F .text	0000002c vPortExitCritical
080012c8 g     F .text	00000078 BSP_LCD_LayerDefaultInit
080025fa g     F .text	00000086 FMC_SDRAM_Init
08000b98 g     F .text	00000070 HAL_NVIC_SetPriority
08000508  w    F .text	00000002 TIM1_CC_IRQHandler
08000508  w    F .text	00000002 DMA2_Stream5_IRQHandler
0800026e g     F .text	00000002 HardFault_Handler
08000508  w    F .text	00000002 DMA1_Stream5_IRQHandler
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000278 g     F .text	0000000e SysTick_Handler
08000ef8 g     F .text	00000008 HAL_GPIO_WritePin
08000508  w    F .text	00000002 PVD_IRQHandler
08001390 g     F .text	0000004c BSP_LCD_DrawHLine
08001912 g     F .text	00000040 HAL_DMA2D_Start
08000508  w    F .text	00000002 TAMP_STAMP_IRQHandler
08004f0c g       *ABS*	00000000 _sidata
08000b40 g     F .text	00000034 HAL_RCC_GetHCLKFreq
08002970 g     F .text	00000064 PendSV_Handler
0800026c g     F .text	00000002 NMI_Handler
08000c08 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004f00 g       .init_array	00000000 __exidx_end
08000508  w    F .text	00000002 CAN2_RX1_IRQHandler
08000508  w    F .text	00000002 EXTI3_IRQHandler
08000ac4 g     F .text	0000007c HAL_RCC_GetSysClockFreq
080025d6 g     F .text	00000024 HAL_SDRAM_ProgramRefreshRate
20000fa4 g     O .bss	00000004 pxCurrentTCB
08000508  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08000286 g     F .text	00000002 HAL_MspInit
08000508  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08000f00 g     F .text	00000008 HAL_GPIO_TogglePin
08002762 g     F .text	0000000c FMC_SDRAM_ProgramRefreshRate
08003408 g       .text	00000000 _etext
20000440 g       .bss	00000000 _sbss
08001bf8 g     F .text	000000e8 HAL_LTDC_Init
080018ba g     F .text	00000058 HAL_DMA2D_Init
08000508  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08000f08 g     F .text	00000074 HAL_PWREx_EnableOverDrive
08000508  w    F .text	00000002 I2C3_ER_IRQHandler
08000d18 g     F .text	000001e0 HAL_GPIO_Init
08002a30 g     F .text	000000a8 xPortStartScheduler
08002680 g     F .text	00000096 FMC_SDRAM_Timing_Init
080027d0 g     F .text	00000010 osDelayUntil
08002dd8 g     F .text	00000044 xTaskGenericCreate
20000440 g     O .data	00000000 .hidden __TMC_END__
08002a08  w    F .text	00000028 vPortSetupTimerInterrupt
08001468 g     F .text	00000034 BSP_LCD_DrawPixel
080029d4 g     F .text	00000034 xPortSysTickHandler
08000508  w    F .text	00000002 EXTI0_IRQHandler
08000508  w    F .text	00000002 I2C2_EV_IRQHandler
08000508  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000508  w    F .text	00000002 CAN1_RX0_IRQHandler
08002830 g     F .text	0000001a vPortFree
08000508  w    F .text	00000002 FPU_IRQHandler
08000cfc  w    F .text	0000001a HAL_Delay
20000000 g     O .data	00000004 SystemCoreClock
080018b8  w    F .text	00000002 HAL_DMA2D_MspInit
08000508  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08002ad8 g     F .text	00000064 vPortValidateInterruptPriority
08001d32 g     F .text	00000006 HAL_LTDC_GetState
08000274 g     F .text	00000002 UsageFault_Handler
08000508  w    F .text	00000002 LTDC_ER_IRQHandler
08001a18 g     F .text	000000cc HAL_DMA2D_ConfigLayer
08002b58 g     F .text	00000018 vListInsertEnd
08000508  w    F .text	00000002 CAN2_SCE_IRQHandler
08000508  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000000 g       .data	00000000 _sdata
08000508  w    F .text	00000002 SPI1_IRQHandler
080011a0 g     F .text	0000007c BSP_SDRAM_Init
08000508  w    F .text	00000002 TIM6_DAC_IRQHandler
08002b52 g     F .text	00000006 vListInitialiseItem
08000508  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000508  w    F .text	00000002 DCMI_IRQHandler
08000508  w    F .text	00000002 CAN2_RX0_IRQHandler
08000c20 g     F .text	0000002c HAL_SYSTICK_Config
08004f00 g       .init_array	00000000 __exidx_start
08000508  w    F .text	00000002 DMA2_Stream3_IRQHandler
08004efc g     O .rodata	00000004 _global_impure_ptr
08001ce0 g     F .text	00000052 HAL_LTDC_ConfigLayer
080032b4 g     F .text	00000050 __libc_init_array
08000508  w    F .text	00000002 SAI2_IRQHandler
080027e0 g     F .text	00000050 pvPortMalloc
08000508  w    F .text	00000002 USART6_IRQHandler
08000f7c g     F .text	00000098 BSP_SDRAM_Initialization_sequence
080033f0 g     F .text	00000000 _init
08002b3c g     F .text	00000016 vListInitialise
08000508  w    F .text	00000002 USART3_IRQHandler
08002e98 g     F .text	0000000c xTaskGetTickCount
08003324 g     F .text	00000028 __libc_fini_array
20000fec g       .bss	00000000 _ebss
080004b8  w    F .text	00000038 Reset_Handler
08002778 g     F .text	0000000e osKernelSysTick
08000508  w    F .text	00000002 CAN1_RX1_IRQHandler
08002520 g     F .text	00000046 HAL_DMA_DeInit
08000508  w    F .text	00000002 UART5_IRQHandler
08000508  w    F .text	00000002 DMA2_Stream0_IRQHandler
08000cbc g     F .text	00000024 HAL_Init
08000508  w    F .text	00000002 TIM4_IRQHandler
08000508  w    F .text	00000002 QUADSPI_IRQHandler
08000508  w    F .text	00000002 I2C1_EV_IRQHandler
08000508  w    F .text	00000002 DMA1_Stream6_IRQHandler
0800276e g     F .text	0000000a osKernelStart
08000508  w    F .text	00000002 DMA1_Stream1_IRQHandler
08000508  w    F .text	00000002 UART4_IRQHandler
20000008 g     O .data	00000008 Font24
08000508  w    F .text	00000002 TIM3_IRQHandler
08000508  w    F .text	00000002 RCC_IRQHandler
08000508  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08002716 g     F .text	0000004c FMC_SDRAM_SendCommand
00000200 g       *ABS*	00000000 _Min_Heap_Size
08000508 g       .text	00000002 Default_Handler
08002e88 g     F .text	00000010 vTaskSuspendAll
08002ea4 g     F .text	00000010 xTaskGetTickCountFromISR
08001298 g     F .text	00000018 BSP_LCD_GetXSize
08002ba0 g     F .text	00000020 uxListRemove
08000508  w    F .text	00000002 CEC_IRQHandler
08000508  w    F .text	00000002 EXTI15_10_IRQHandler
0800334c g     F .text	000000a4 __register_exitproc
08000508  w    F .text	00000002 ADC_IRQHandler
08000908 g     F .text	000001bc HAL_RCC_ClockConfig
08000b74 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0800149c g     F .text	000000dc BSP_LCD_DrawLine
0800321c g     F .text	00000078 vTaskSwitchContext
08000508  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000508  w    F .text	00000002 SPI5_IRQHandler
08000508  w    F .text	00000002 TIM7_IRQHandler
08000508  w    F .text	00000002 SDMMC1_IRQHandler
08000508  w    F .text	00000002 CAN2_TX_IRQHandler
08001014  w    F .text	0000018c BSP_SDRAM_MspInit
08000508  w    F .text	00000002 TIM5_IRQHandler
08001340 g     F .text	0000000c BSP_LCD_SelectLayer
20000fe8 g     O .bss	00000004 LED1_ThreadId
08000508  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000508  w    F .text	00000002 I2C3_EV_IRQHandler
08000508  w    F .text	00000002 EXTI9_5_IRQHandler
08000508  w    F .text	00000002 RTC_WKUP_IRQHandler
08000508  w    F .text	00000002 LTDC_IRQHandler
08000508  w    F .text	00000002 ETH_WKUP_IRQHandler
08000cf0  w    F .text	0000000c HAL_GetTick
08000508  w    F .text	00000002 SPDIF_RX_IRQHandler
080015ac  w    F .text	00000158 BSP_LCD_MspInit
08000508  w    F .text	00000002 SPI2_IRQHandler
08003431 g     O .rodata	00001ab8 Font24_Table
08000508  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08000270 g     F .text	00000002 MemManage_Handler
080002c8 g     F .text	000001f0 main
08000508  w    F .text	00000002 DMA1_Stream0_IRQHandler
08002566  w    F .text	00000002 HAL_SDRAM_MspInit
08002b70 g     F .text	00000030 vListInsert
08000508  w    F .text	00000002 CAN1_TX_IRQHandler
080028d8 g     F .text	00000020 SVC_Handler
080030d8 g     F .text	000000cc vTaskDelayUntil
0800134c g     F .text	00000018 BSP_LCD_SetTextColor
08001704  w    F .text	0000001c BSP_LCD_ClockConfig
08000508  w    F .text	00000002 EXTI4_IRQHandler
0800050c g     F .text	0000004c SystemInit
08000508  w    F .text	00000002 RNG_IRQHandler
080033fc g     F .text	00000000 _fini
08002fe8 g     F .text	000000f0 xTaskResumeAll
08002e1c g     F .text	0000006c vTaskStartScheduler
08003318 g     F .text	0000000c atexit
08001bf6  w    F .text	00000002 HAL_LTDC_MspInit
08000c98  w    F .text	00000024 HAL_InitTick
08000508  w    F .text	00000002 ETH_IRQHandler
08000ce0  w    F .text	00000010 HAL_IncTick
08000508  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
080013dc g     F .text	00000058 BSP_LCD_DrawVLine
08000508  w    F .text	00000002 WWDG_IRQHandler
08000508  w    F .text	00000002 SPI6_IRQHandler
08000508  w    F .text	00000002 I2C4_EV_IRQHandler
08000508  w    F .text	00000002 TIM2_IRQHandler
08000508  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08002eb4 g     F .text	00000134 xTaskIncrementTick
08000508  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08000508  w    F .text	00000002 OTG_HS_IRQHandler
08001828 g     F .text	00000010 BSP_LED_Toggle
08000508  w    F .text	00000002 DMA2D_IRQHandler
2004ffff g       *ABS*	00000000 _estack
08000508  w    F .text	00000002 EXTI1_IRQHandler
20000440 g       .data	00000000 _edata
08002786 g     F .text	00000036 osThreadCreate
080012b0 g     F .text	00000018 BSP_LCD_GetYSize
08000508  w    F .text	00000002 UART7_IRQHandler
08000508  w    F .text	00000002 USART2_IRQHandler
08000558 g     F .text	000003b0 HAL_RCC_OscConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001d38 g     F .text	00000748 HAL_RCCEx_PeriphCLKConfig
08000508  w    F .text	00000002 I2C2_ER_IRQHandler
080017dc g     F .text	0000004c BSP_LED_Init
08000c4c g     F .text	0000004c HAL_MPU_ConfigRegion
08000508  w    F .text	00000002 DMA2_Stream1_IRQHandler
08003294 g     F .text	00000020 xTaskGetSchedulerState
08001720 g     F .text	000000bc BSP_LCD_Init
08000508  w    F .text	00000002 CAN1_SCE_IRQHandler
08000508  w    F .text	00000002 FLASH_IRQHandler
08000508  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000272 g     F .text	00000002 BusFault_Handler
08000508  w    F .text	00000002 USART1_IRQHandler
080028b8 g     F .text	00000020 pxPortInitialiseStack
08000508  w    F .text	00000002 OTG_FS_IRQHandler
08000508  w    F .text	00000002 SPI3_IRQHandler
080027bc g     F .text	00000014 osSystickHandler
08000508  w    F .text	00000002 DMA1_Stream4_IRQHandler
08001952 g     F .text	000000c4 HAL_DMA2D_PollForTransfer
08000508  w    F .text	00000002 I2C1_ER_IRQHandler
08000508  w    F .text	00000002 FMC_IRQHandler
080028f8 g     F .text	0000004c vPortEnterCritical
08001364 g     F .text	0000002c BSP_LCD_Clear
08000508  w    F .text	00000002 LPTIM1_IRQHandler
08002568 g     F .text	00000040 HAL_SDRAM_Init
08000508  w    F .text	00000002 I2C4_ER_IRQHandler
08000508  w    F .text	00000002 DMA2_Stream6_IRQHandler
08001578 g     F .text	00000034 BSP_LCD_DisplayOn
08000508  w    F .text	00000002 SAI1_IRQHandler
08000508  w    F .text	00000002 DMA1_Stream3_IRQHandler
080025a8 g     F .text	0000002e HAL_SDRAM_SendCommand



Disassembly of section .text:

080001c8 <deregister_tm_clones>:
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x14>)
 80001ca:	4805      	ldr	r0, [pc, #20]	; (80001e0 <deregister_tm_clones+0x18>)
 80001cc:	1a1b      	subs	r3, r3, r0
 80001ce:	2b06      	cmp	r3, #6
 80001d0:	d902      	bls.n	80001d8 <deregister_tm_clones+0x10>
 80001d2:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <deregister_tm_clones+0x1c>)
 80001d4:	b103      	cbz	r3, 80001d8 <deregister_tm_clones+0x10>
 80001d6:	4718      	bx	r3
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000443 	.word	0x20000443
 80001e0:	20000440 	.word	0x20000440
 80001e4:	00000000 	.word	0x00000000

080001e8 <register_tm_clones>:
 80001e8:	4905      	ldr	r1, [pc, #20]	; (8000200 <register_tm_clones+0x18>)
 80001ea:	4806      	ldr	r0, [pc, #24]	; (8000204 <register_tm_clones+0x1c>)
 80001ec:	1a09      	subs	r1, r1, r0
 80001ee:	1089      	asrs	r1, r1, #2
 80001f0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001f4:	1049      	asrs	r1, r1, #1
 80001f6:	d002      	beq.n	80001fe <register_tm_clones+0x16>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <register_tm_clones+0x20>)
 80001fa:	b103      	cbz	r3, 80001fe <register_tm_clones+0x16>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	20000440 	.word	0x20000440
 8000204:	20000440 	.word	0x20000440
 8000208:	00000000 	.word	0x00000000

0800020c <__do_global_dtors_aux>:
 800020c:	b510      	push	{r4, lr}
 800020e:	4c06      	ldr	r4, [pc, #24]	; (8000228 <__do_global_dtors_aux+0x1c>)
 8000210:	7823      	ldrb	r3, [r4, #0]
 8000212:	b943      	cbnz	r3, 8000226 <__do_global_dtors_aux+0x1a>
 8000214:	f7ff ffd8 	bl	80001c8 <deregister_tm_clones>
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__do_global_dtors_aux+0x20>)
 800021a:	b113      	cbz	r3, 8000222 <__do_global_dtors_aux+0x16>
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x24>)
 800021e:	f3af 8000 	nop.w
 8000222:	2301      	movs	r3, #1
 8000224:	7023      	strb	r3, [r4, #0]
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000440 	.word	0x20000440
 800022c:	00000000 	.word	0x00000000
 8000230:	080033f0 	.word	0x080033f0

08000234 <frame_dummy>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <frame_dummy+0x24>)
 8000238:	b11b      	cbz	r3, 8000242 <frame_dummy+0xe>
 800023a:	4908      	ldr	r1, [pc, #32]	; (800025c <frame_dummy+0x28>)
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <frame_dummy+0x2c>)
 800023e:	f3af 8000 	nop.w
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <frame_dummy+0x30>)
 8000244:	6803      	ldr	r3, [r0, #0]
 8000246:	b913      	cbnz	r3, 800024e <frame_dummy+0x1a>
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7cc      	b.n	80001e8 <register_tm_clones>
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <frame_dummy+0x34>)
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f9      	beq.n	8000248 <frame_dummy+0x14>
 8000254:	4798      	blx	r3
 8000256:	e7f7      	b.n	8000248 <frame_dummy+0x14>
 8000258:	00000000 	.word	0x00000000
 800025c:	20000444 	.word	0x20000444
 8000260:	080033f0 	.word	0x080033f0
 8000264:	20000440 	.word	0x20000440
 8000268:	00000000 	.word	0x00000000

0800026c <NMI_Handler>:
 800026c:	4770      	bx	lr

0800026e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800026e:	e7fe      	b.n	800026e <HardFault_Handler>

08000270 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000270:	e7fe      	b.n	8000270 <MemManage_Handler>

08000272 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000272:	e7fe      	b.n	8000272 <BusFault_Handler>

08000274 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000274:	e7fe      	b.n	8000274 <UsageFault_Handler>

08000276 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000278:	b508      	push	{r3, lr}
  osSystickHandler();
 800027a:	f002 fa9f 	bl	80027bc <osSystickHandler>
  HAL_IncTick();
}
 800027e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
  HAL_IncTick();
 8000282:	f000 bd2d 	b.w	8000ce0 <HAL_IncTick>

08000286 <HAL_MspInit>:
 8000286:	4770      	bx	lr

08000288 <LED_Thread1>:
      HAL_Delay(400);
  */}
}

static void LED_Thread1(void const *argument)
{
 8000288:	b513      	push	{r0, r1, r4, lr}
  (void) argument;
  uint32_t PreviousWakeTime = osKernelSysTick();
 800028a:	ac02      	add	r4, sp, #8
 800028c:	f002 fa74 	bl	8002778 <osKernelSysTick>
 8000290:	f844 0d04 	str.w	r0, [r4, #-4]!
 * is called, osDelayUntil () specifies the absolute (exact) time at which it wishes to
 * unblock.
 * PreviousWakeTime must be initialised with the current time prior to its first use 
 * (PreviousWakeTime = osKernelSysTick() )   
 */  
    osDelayUntil (&PreviousWakeTime, 1000);
 8000294:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000298:	4620      	mov	r0, r4
 800029a:	f002 fa99 	bl	80027d0 <osDelayUntil>
    BSP_LED_Toggle(LED1);
 800029e:	2000      	movs	r0, #0
 80002a0:	f001 fac2 	bl	8001828 <BSP_LED_Toggle>
 80002a4:	e7f6      	b.n	8000294 <LED_Thread1+0xc>

080002a6 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80002a6:	b510      	push	{r4, lr}
 80002a8:	2403      	movs	r4, #3
  uint8_t i=0;
  /* User may add here some code to deal with this error */
  while(1)
  {
      for (i=0; i<3; i++) {
          BSP_LED_Toggle(LED1);
 80002aa:	2000      	movs	r0, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f001 fabb 	bl	8001828 <BSP_LED_Toggle>
          HAL_Delay(100);
 80002b2:	2064      	movs	r0, #100	; 0x64
 80002b4:	f000 fd22 	bl	8000cfc <HAL_Delay>
{
  uint8_t i=0;
  /* User may add here some code to deal with this error */
  while(1)
  {
      for (i=0; i<3; i++) {
 80002b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002bc:	d1f5      	bne.n	80002aa <Error_Handler+0x4>
          BSP_LED_Toggle(LED1);
          HAL_Delay(100);
      }
      HAL_Delay(500);
 80002be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c2:	f000 fd1b 	bl	8000cfc <HAL_Delay>
  }
 80002c6:	e7ef      	b.n	80002a8 <Error_Handler+0x2>

080002c8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80002c8:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80002ca:	4c74      	ldr	r4, [pc, #464]	; (800049c <main+0x1d4>)
 80002cc:	b094      	sub	sp, #80	; 0x50
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 80002ce:	4e74      	ldr	r6, [pc, #464]	; (80004a0 <main+0x1d8>)
  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80002d0:	2500      	movs	r5, #0
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80002d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80002d4:	a808      	add	r0, sp, #32
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
 80002d6:	4a73      	ldr	r2, [pc, #460]	; (80004a4 <main+0x1dc>)
 80002d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002dc:	6263      	str	r3, [r4, #36]	; 0x24
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 80002de:	6873      	ldr	r3, [r6, #4]
 80002e0:	f023 0301 	bic.w	r3, r3, #1
 80002e4:	6073      	str	r3, [r6, #4]
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80002e6:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x20010000;
 80002e8:	9209      	str	r2, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80002ea:	2211      	movs	r2, #17
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80002ec:	f88d 3020 	strb.w	r3, [sp, #32]
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80002f0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80002f4:	2203      	movs	r2, #3
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80002f6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80002fa:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80002fe:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000302:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000306:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800030a:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
  MPU_InitStruct.SubRegionDisable = 0x00;
 800030e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000312:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000316:	f000 fc99 	bl	8000c4c <HAL_MPU_ConfigRegion>
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800031a:	2305      	movs	r3, #5
 800031c:	6073      	str	r3, [r6, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800031e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	6263      	str	r3, [r4, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000326:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800032a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800032e:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000332:	6963      	ldr	r3, [r4, #20]
 8000334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000338:	6163      	str	r3, [r4, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800033a:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800033e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000342:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000346:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800034a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800034e:	f3c2 334e 	ubfx	r3, r2, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000352:	f3c2 02c9 	ubfx	r2, r2, #3, #10
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000356:	0159      	lsls	r1, r3, #5
 8000358:	f643 70e0 	movw	r0, #16352	; 0x3fe0
 800035c:	4008      	ands	r0, r1
    ccsidr = SCB->CCSIDR;

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800035e:	4611      	mov	r1, r2
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000360:	ea40 7681 	orr.w	r6, r0, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000364:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000368:	4d4c      	ldr	r5, [pc, #304]	; (800049c <main+0x1d4>)
 800036a:	f8c4 6260 	str.w	r6, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 800036e:	d2f7      	bcs.n	8000360 <main+0x98>
    } while(sets--);
 8000370:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000374:	d2ef      	bcs.n	8000356 <main+0x8e>
 8000376:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800037a:	696b      	ldr	r3, [r5, #20]
 800037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000380:	616b      	str	r3, [r5, #20]
 8000382:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000386:	f3bf 8f6f 	isb	sy
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800038a:	f000 fc97 	bl	8000cbc <HAL_Init>
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b46      	ldr	r3, [pc, #280]	; (80004a8 <main+0x1e0>)
 8000390:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2402      	movs	r4, #2
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000396:	a808      	add	r0, sp, #32
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000398:	9101      	str	r1, [sp, #4]
 800039a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800039c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003a0:	641a      	str	r2, [r3, #64]	; 0x40
 80003a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ac:	4b3f      	ldr	r3, [pc, #252]	; (80004ac <main+0x1e4>)
 80003ae:	9102      	str	r1, [sp, #8]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	9508      	str	r5, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c2:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c4:	9302      	str	r3, [sp, #8]
 80003c6:	9b02      	ldr	r3, [sp, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003d2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80003d4:	2319      	movs	r3, #25
 80003d6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80003d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80003dc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80003de:	2308      	movs	r3, #8
 80003e0:	9313      	str	r3, [sp, #76]	; 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003e2:	f000 f8b9 	bl	8000558 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) Error_Handler();
 80003e6:	b108      	cbz	r0, 80003ec <main+0x124>
 80003e8:	f7ff ff5d 	bl	80002a6 <Error_Handler>

  /* activate the OverDrive to reach the 180 Mhz Frequency */
  ret = HAL_PWREx_ActivateOverDrive();
 80003ec:	f000 fd8c 	bl	8000f08 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) Error_Handler();
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d1f9      	bne.n	80003e8 <main+0x120>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003f4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 80003f8:	2105      	movs	r1, #5
 80003fa:	a803      	add	r0, sp, #12
  ret = HAL_PWREx_ActivateOverDrive();
  if(ret != HAL_OK) Error_Handler();

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003fc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80003fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if(ret != HAL_OK) Error_Handler();

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000404:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040a:	9307      	str	r3, [sp, #28]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 800040c:	f000 fa7c 	bl	8000908 <HAL_RCC_ClockConfig>
 8000410:	2800      	cmp	r0, #0
 8000412:	d1e9      	bne.n	80003e8 <main+0x120>
  HAL_Init();

  /* Configure the System clock to have a frequency of 216 MHz */
  SystemClock_Config();

  BSP_LED_Init(LED1);
 8000414:	f001 f9e2 	bl	80017dc <BSP_LED_Init>
  BSP_SDRAM_Init();
 8000418:	f000 fec2 	bl	80011a0 <BSP_SDRAM_Init>

  /* Add your application code here
     */

  /* Initialize LCD */
  if( BSP_LCD_Init() != LCD_OK) Error_Handler();
 800041c:	f001 f980 	bl	8001720 <BSP_LCD_Init>
 8000420:	4604      	mov	r4, r0
 8000422:	2800      	cmp	r0, #0
 8000424:	d1e0      	bne.n	80003e8 <main+0x120>
  
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8000426:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800042a:	4628      	mov	r0, r5
 800042c:	f000 ff4c 	bl	80012c8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000430:	4628      	mov	r0, r5
 8000432:	f000 ff85 	bl	8001340 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000436:	f001 f89f 	bl	8001578 <BSP_LCD_DisplayOn>
  
  /* Set draw settings */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800043a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800043e:	f000 ff91 	bl	8001364 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000442:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000446:	f000 ff81 	bl	800134c <BSP_LCD_SetTextColor>
  
  /* Draw test frame */
  uint16_t x0 = 0;
  uint16_t y0 = 0;
  uint16_t x1 = BSP_LCD_GetXSize() - 1 - x0;
 800044a:	f000 ff25 	bl	8001298 <BSP_LCD_GetXSize>
 800044e:	3801      	subs	r0, #1
 8000450:	b286      	uxth	r6, r0
  uint16_t y1 = BSP_LCD_GetYSize() - 1 - y0;
 8000452:	f000 ff2d 	bl	80012b0 <BSP_LCD_GetYSize>
 8000456:	3801      	subs	r0, #1
  
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
 8000458:	4632      	mov	r2, r6
 800045a:	4621      	mov	r1, r4
  
  /* Draw test frame */
  uint16_t x0 = 0;
  uint16_t y0 = 0;
  uint16_t x1 = BSP_LCD_GetXSize() - 1 - x0;
  uint16_t y1 = BSP_LCD_GetYSize() - 1 - y0;
 800045c:	b285      	uxth	r5, r0
  
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
 800045e:	4620      	mov	r0, r4
 8000460:	462b      	mov	r3, r5
 8000462:	f000 ffe7 	bl	8001434 <BSP_LCD_DrawRect>
  BSP_LCD_DrawLine(x0, y0, x1, y1);
 8000466:	462b      	mov	r3, r5
 8000468:	4632      	mov	r2, r6
 800046a:	4621      	mov	r1, r4
 800046c:	4620      	mov	r0, r4
 800046e:	f001 f815 	bl	800149c <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(x0, y1, x1, y0);
 8000472:	4632      	mov	r2, r6
  
  /* Thread 1 definition */
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000474:	4e0e      	ldr	r6, [pc, #56]	; (80004b0 <main+0x1e8>)
  uint16_t x1 = BSP_LCD_GetXSize() - 1 - x0;
  uint16_t y1 = BSP_LCD_GetYSize() - 1 - y0;
  
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
  BSP_LCD_DrawLine(x0, y0, x1, y1);
  BSP_LCD_DrawLine(x0, y1, x1, y0);
 8000476:	4629      	mov	r1, r5
 8000478:	4623      	mov	r3, r4
 800047a:	4620      	mov	r0, r4
 800047c:	f001 f80e 	bl	800149c <BSP_LCD_DrawLine>
  
  /* Thread 1 definition */
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000480:	ad08      	add	r5, sp, #32
 8000482:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000486:	6833      	ldr	r3, [r6, #0]
  
  /* Start thread 1 */
  LED1_ThreadId = osThreadCreate(osThread(LED1), NULL);
 8000488:	4621      	mov	r1, r4
 800048a:	a808      	add	r0, sp, #32
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
  BSP_LCD_DrawLine(x0, y0, x1, y1);
  BSP_LCD_DrawLine(x0, y1, x1, y0);
  
  /* Thread 1 definition */
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800048c:	602b      	str	r3, [r5, #0]
  
  /* Start thread 1 */
  LED1_ThreadId = osThreadCreate(osThread(LED1), NULL);
 800048e:	f002 f97a 	bl	8002786 <osThreadCreate>
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <main+0x1ec>)
 8000494:	6018      	str	r0, [r3, #0]
  
  /* Start scheduler */
  osKernelStart();
 8000496:	f002 f96a 	bl	800276e <osKernelStart>
 800049a:	e7fe      	b.n	800049a <main+0x1d2>
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	e000ed90 	.word	0xe000ed90
 80004a4:	20010000 	.word	0x20010000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40007000 	.word	0x40007000
 80004b0:	08003408 	.word	0x08003408
 80004b4:	20000fe8 	.word	0x20000fe8

080004b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004be:	e003      	b.n	80004c8 <LoopCopyDataInit>

080004c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004c6:	3104      	adds	r1, #4

080004c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004d0:	d3f6      	bcc.n	80004c0 <CopyDataInit>
  ldr  r2, =_sbss
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004d4:	e002      	b.n	80004dc <LoopFillZerobss>

080004d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004d8:	f842 3b04 	str.w	r3, [r2], #4

080004dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004e0:	d3f9      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004e2:	f000 f813 	bl	800050c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e6:	f002 fee5 	bl	80032b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ea:	f7ff feed 	bl	80002c8 <main>
  bx  lr    
 80004ee:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f0:	2004ffff 	.word	0x2004ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80004f4:	08004f0c 	.word	0x08004f0c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004fc:	20000440 	.word	0x20000440
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000500:	20000440 	.word	0x20000440
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000504:	20000fec 	.word	0x20000fec

08000508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>
	...

0800050c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800050c:	490f      	ldr	r1, [pc, #60]	; (800054c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800050e:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000510:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <SystemInit+0x44>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	f042 0201 	orr.w	r2, r2, #1
 8000524:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000526:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800052e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000532:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SystemInit+0x48>)
 8000536:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800053e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000546:	608b      	str	r3, [r1, #8]
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	40023800 	.word	0x40023800
 8000554:	24003010 	.word	0x24003010

08000558 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000558:	6803      	ldr	r3, [r0, #0]
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800055a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055e:	07dd      	lsls	r5, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000560:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000562:	d403      	bmi.n	800056c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	0798      	lsls	r0, r3, #30
 8000568:	d470      	bmi.n	800064c <HAL_RCC_OscConfig+0xf4>
 800056a:	e0c3      	b.n	80006f4 <HAL_RCC_OscConfig+0x19c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800056c:	4ba4      	ldr	r3, [pc, #656]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	f002 020c 	and.w	r2, r2, #12
 8000574:	2a04      	cmp	r2, #4
 8000576:	d007      	beq.n	8000588 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	f002 020c 	and.w	r2, r2, #12
 800057e:	2a08      	cmp	r2, #8
 8000580:	d10b      	bne.n	800059a <HAL_RCC_OscConfig+0x42>
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	0259      	lsls	r1, r3, #9
 8000586:	d508      	bpl.n	800059a <HAL_RCC_OscConfig+0x42>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000588:	4b9d      	ldr	r3, [pc, #628]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	039a      	lsls	r2, r3, #14
 800058e:	d5e9      	bpl.n	8000564 <HAL_RCC_OscConfig+0xc>
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1e6      	bne.n	8000564 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000596:	2001      	movs	r0, #1
 8000598:	e1b1      	b.n	80008fe <HAL_RCC_OscConfig+0x3a6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800059a:	4d99      	ldr	r5, [pc, #612]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 800059c:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059e:	462e      	mov	r6, r5
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80005a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005a4:	602b      	str	r3, [r5, #0]
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ac:	602b      	str	r3, [r5, #0]
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b4:	602b      	str	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005b6:	f000 fb9b 	bl	8000cf0 <HAL_GetTick>
 80005ba:	4607      	mov	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005bc:	6833      	ldr	r3, [r6, #0]
 80005be:	4d90      	ldr	r5, [pc, #576]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 80005c0:	039b      	lsls	r3, r3, #14
 80005c2:	d507      	bpl.n	80005d4 <HAL_RCC_OscConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c4:	f000 fb94 	bl	8000cf0 <HAL_GetTick>
 80005c8:	1bc0      	subs	r0, r0, r7
 80005ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80005ce:	d9f5      	bls.n	80005bc <HAL_RCC_OscConfig+0x64>
        {
          return HAL_TIMEOUT;
 80005d0:	2003      	movs	r0, #3
 80005d2:	e194      	b.n	80008fe <HAL_RCC_OscConfig+0x3a6>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005da:	602b      	str	r3, [r5, #0]
 80005dc:	6863      	ldr	r3, [r4, #4]
 80005de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e2:	d103      	bne.n	80005ec <HAL_RCC_OscConfig+0x94>
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ea:	e005      	b.n	80005f8 <HAL_RCC_OscConfig+0xa0>
 80005ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005f0:	d108      	bne.n	8000604 <HAL_RCC_OscConfig+0xac>
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f8:	602b      	str	r3, [r5, #0]
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	602b      	str	r3, [r5, #0]
 8000602:	e008      	b.n	8000616 <HAL_RCC_OscConfig+0xbe>
 8000604:	682a      	ldr	r2, [r5, #0]
 8000606:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800060a:	602a      	str	r2, [r5, #0]
 800060c:	682a      	ldr	r2, [r5, #0]
 800060e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000612:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000614:	b16b      	cbz	r3, 8000632 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000616:	f000 fb6b 	bl	8000cf0 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800061a:	4d79      	ldr	r5, [pc, #484]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800061c:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	039f      	lsls	r7, r3, #14
 8000622:	d49f      	bmi.n	8000564 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000624:	f000 fb64 	bl	8000cf0 <HAL_GetTick>
 8000628:	1b80      	subs	r0, r0, r6
 800062a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800062e:	d9f6      	bls.n	800061e <HAL_RCC_OscConfig+0xc6>
 8000630:	e7ce      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000632:	f000 fb5d 	bl	8000cf0 <HAL_GetTick>
 8000636:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000638:	682b      	ldr	r3, [r5, #0]
 800063a:	0398      	lsls	r0, r3, #14
 800063c:	d592      	bpl.n	8000564 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800063e:	f000 fb57 	bl	8000cf0 <HAL_GetTick>
 8000642:	1b80      	subs	r0, r0, r6
 8000644:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000648:	d9f6      	bls.n	8000638 <HAL_RCC_OscConfig+0xe0>
 800064a:	e7c1      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800064c:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	f012 0f0c 	tst.w	r2, #12
 8000654:	d007      	beq.n	8000666 <HAL_RCC_OscConfig+0x10e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	f002 020c 	and.w	r2, r2, #12
 800065c:	2a08      	cmp	r2, #8
 800065e:	d117      	bne.n	8000690 <HAL_RCC_OscConfig+0x138>
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	0259      	lsls	r1, r3, #9
 8000664:	d414      	bmi.n	8000690 <HAL_RCC_OscConfig+0x138>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	0792      	lsls	r2, r2, #30
 800066c:	d502      	bpl.n	8000674 <HAL_RCC_OscConfig+0x11c>
 800066e:	68e2      	ldr	r2, [r4, #12]
 8000670:	2a01      	cmp	r2, #1
 8000672:	d190      	bne.n	8000596 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000674:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000676:	21f8      	movs	r1, #248	; 0xf8
 8000678:	fa91 f1a1 	rbit	r1, r1
 800067c:	6920      	ldr	r0, [r4, #16]
 800067e:	fab1 f181 	clz	r1, r1
 8000682:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000686:	fa00 f101 	lsl.w	r1, r0, r1
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800068e:	e031      	b.n	80006f4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000690:	68e3      	ldr	r3, [r4, #12]
 8000692:	4d5b      	ldr	r5, [pc, #364]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 8000694:	b1f3      	cbz	r3, 80006d4 <HAL_RCC_OscConfig+0x17c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000696:	682b      	ldr	r3, [r5, #0]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800069e:	f000 fb27 	bl	8000cf0 <HAL_GetTick>
 80006a2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a4:	682b      	ldr	r3, [r5, #0]
 80006a6:	4856      	ldr	r0, [pc, #344]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 80006a8:	079f      	lsls	r7, r3, #30
 80006aa:	d405      	bmi.n	80006b8 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ac:	f000 fb20 	bl	8000cf0 <HAL_GetTick>
 80006b0:	1b80      	subs	r0, r0, r6
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x14c>
 80006b6:	e78b      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	22f8      	movs	r2, #248	; 0xf8
 80006bc:	fa92 f2a2 	rbit	r2, r2
 80006c0:	6921      	ldr	r1, [r4, #16]
 80006c2:	fab2 f282 	clz	r2, r2
 80006c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4313      	orrs	r3, r2
 80006d0:	6003      	str	r3, [r0, #0]
 80006d2:	e00f      	b.n	80006f4 <HAL_RCC_OscConfig+0x19c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006d4:	682b      	ldr	r3, [r5, #0]
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006dc:	f000 fb08 	bl	8000cf0 <HAL_GetTick>
 80006e0:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	0799      	lsls	r1, r3, #30
 80006e6:	d505      	bpl.n	80006f4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006e8:	f000 fb02 	bl	8000cf0 <HAL_GetTick>
 80006ec:	1b80      	subs	r0, r0, r6
 80006ee:	2864      	cmp	r0, #100	; 0x64
 80006f0:	d9f7      	bls.n	80006e2 <HAL_RCC_OscConfig+0x18a>
 80006f2:	e76d      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006f4:	6823      	ldr	r3, [r4, #0]
 80006f6:	071a      	lsls	r2, r3, #28
 80006f8:	d403      	bmi.n	8000702 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	075b      	lsls	r3, r3, #29
 80006fe:	d569      	bpl.n	80007d4 <HAL_RCC_OscConfig+0x27c>
 8000700:	e022      	b.n	8000748 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	4d3e      	ldr	r5, [pc, #248]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 8000706:	b17b      	cbz	r3, 8000728 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000708:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000710:	f000 faee 	bl	8000cf0 <HAL_GetTick>
 8000714:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000716:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000718:	079f      	lsls	r7, r3, #30
 800071a:	d4ee      	bmi.n	80006fa <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800071c:	f000 fae8 	bl	8000cf0 <HAL_GetTick>
 8000720:	1b80      	subs	r0, r0, r6
 8000722:	2864      	cmp	r0, #100	; 0x64
 8000724:	d9f7      	bls.n	8000716 <HAL_RCC_OscConfig+0x1be>
 8000726:	e753      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000728:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800072a:	f023 0301 	bic.w	r3, r3, #1
 800072e:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000730:	f000 fade 	bl	8000cf0 <HAL_GetTick>
 8000734:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000736:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000738:	0798      	lsls	r0, r3, #30
 800073a:	d5de      	bpl.n	80006fa <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800073c:	f000 fad8 	bl	8000cf0 <HAL_GetTick>
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	2864      	cmp	r0, #100	; 0x64
 8000744:	d9f7      	bls.n	8000736 <HAL_RCC_OscConfig+0x1de>
 8000746:	e743      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800074a:	4d2e      	ldr	r5, [pc, #184]	; (8000804 <HAL_RCC_OscConfig+0x2ac>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000752:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000756:	641a      	str	r2, [r3, #64]	; 0x40
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000762:	682b      	ldr	r3, [r5, #0]
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800076a:	f000 fac1 	bl	8000cf0 <HAL_GetTick>
 800076e:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	05d9      	lsls	r1, r3, #23
 8000774:	d531      	bpl.n	80007da <HAL_RCC_OscConfig+0x282>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000776:	4d22      	ldr	r5, [pc, #136]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000778:	f241 3888 	movw	r8, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800077c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800077e:	462e      	mov	r6, r5
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	672b      	str	r3, [r5, #112]	; 0x70
 8000786:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	672b      	str	r3, [r5, #112]	; 0x70
 800078e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	672b      	str	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000796:	f000 faab 	bl	8000cf0 <HAL_GetTick>
 800079a:	4607      	mov	r7, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800079c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800079e:	4d18      	ldr	r5, [pc, #96]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
 80007a0:	079a      	lsls	r2, r3, #30
 80007a2:	d420      	bmi.n	80007e6 <HAL_RCC_OscConfig+0x28e>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	672b      	str	r3, [r5, #112]	; 0x70
 80007ac:	68a3      	ldr	r3, [r4, #8]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11f      	bne.n	80007f2 <HAL_RCC_OscConfig+0x29a>
 80007b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	672b      	str	r3, [r5, #112]	; 0x70
 80007ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80007c2:	f000 fa95 	bl	8000cf0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007c6:	4d0e      	ldr	r5, [pc, #56]	; (8000800 <HAL_RCC_OscConfig+0x2a8>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80007c8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ca:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007d0:	079b      	lsls	r3, r3, #30
 80007d2:	d523      	bpl.n	800081c <HAL_RCC_OscConfig+0x2c4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007d4:	69a2      	ldr	r2, [r4, #24]
 80007d6:	bbaa      	cbnz	r2, 8000844 <HAL_RCC_OscConfig+0x2ec>
 80007d8:	e077      	b.n	80008ca <HAL_RCC_OscConfig+0x372>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80007da:	f000 fa89 	bl	8000cf0 <HAL_GetTick>
 80007de:	1b80      	subs	r0, r0, r6
 80007e0:	2864      	cmp	r0, #100	; 0x64
 80007e2:	d9c5      	bls.n	8000770 <HAL_RCC_OscConfig+0x218>
 80007e4:	e6f4      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007e6:	f000 fa83 	bl	8000cf0 <HAL_GetTick>
 80007ea:	1bc0      	subs	r0, r0, r7
 80007ec:	4540      	cmp	r0, r8
 80007ee:	d9d5      	bls.n	800079c <HAL_RCC_OscConfig+0x244>
 80007f0:	e6ee      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d108      	bne.n	8000808 <HAL_RCC_OscConfig+0x2b0>
 80007f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	e7dc      	b.n	80007b8 <HAL_RCC_OscConfig+0x260>
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000
 8000808:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800080a:	f022 0204 	bic.w	r2, r2, #4
 800080e:	672a      	str	r2, [r5, #112]	; 0x70
 8000810:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000812:	f022 0201 	bic.w	r2, r2, #1
 8000816:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000818:	b133      	cbz	r3, 8000828 <HAL_RCC_OscConfig+0x2d0>
 800081a:	e7d2      	b.n	80007c2 <HAL_RCC_OscConfig+0x26a>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800081c:	f000 fa68 	bl	8000cf0 <HAL_GetTick>
 8000820:	1b80      	subs	r0, r0, r6
 8000822:	42b8      	cmp	r0, r7
 8000824:	d9d3      	bls.n	80007ce <HAL_RCC_OscConfig+0x276>
 8000826:	e6d3      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000828:	f000 fa62 	bl	8000cf0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800082c:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000830:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000832:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000834:	0798      	lsls	r0, r3, #30
 8000836:	d5cd      	bpl.n	80007d4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000838:	f000 fa5a 	bl	8000cf0 <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	42b8      	cmp	r0, r7
 8000840:	d9f7      	bls.n	8000832 <HAL_RCC_OscConfig+0x2da>
 8000842:	e6c5      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000844:	4d2f      	ldr	r5, [pc, #188]	; (8000904 <HAL_RCC_OscConfig+0x3ac>)
 8000846:	68ab      	ldr	r3, [r5, #8]
 8000848:	f003 030c 	and.w	r3, r3, #12
 800084c:	2b08      	cmp	r3, #8
 800084e:	f43f aea2 	beq.w	8000596 <HAL_RCC_OscConfig+0x3e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000852:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000854:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800085a:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800085c:	d143      	bne.n	80008e6 <HAL_RCC_OscConfig+0x38e>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800085e:	f000 fa47 	bl	8000cf0 <HAL_GetTick>
 8000862:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	4e27      	ldr	r6, [pc, #156]	; (8000904 <HAL_RCC_OscConfig+0x3ac>)
 8000868:	0199      	lsls	r1, r3, #6
 800086a:	d430      	bmi.n	80008ce <HAL_RCC_OscConfig+0x376>
 800086c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000870:	fa92 f2a2 	rbit	r2, r2
 8000874:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000878:	fab2 f082 	clz	r0, r2
 800087c:	fa93 f3a3 	rbit	r3, r3
 8000880:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000884:	fab3 f583 	clz	r5, r3
 8000888:	fa92 f2a2 	rbit	r2, r2
 800088c:	6a23      	ldr	r3, [r4, #32]
 800088e:	fab2 f182 	clz	r1, r2
 8000892:	69e7      	ldr	r7, [r4, #28]
 8000894:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000896:	431f      	orrs	r7, r3
 8000898:	4082      	lsls	r2, r0
 800089a:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 800089e:	ea43 0002 	orr.w	r0, r3, r2
 80008a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008a4:	085a      	lsrs	r2, r3, #1
 80008a6:	3a01      	subs	r2, #1
 80008a8:	fa02 f305 	lsl.w	r3, r2, r5
 80008ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008ae:	4303      	orrs	r3, r0
 80008b0:	408a      	lsls	r2, r1
 80008b2:	4313      	orrs	r3, r2
 80008b4:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008b6:	6833      	ldr	r3, [r6, #0]
 80008b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008bc:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008be:	f000 fa17 	bl	8000cf0 <HAL_GetTick>
 80008c2:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008c4:	6833      	ldr	r3, [r6, #0]
 80008c6:	019a      	lsls	r2, r3, #6
 80008c8:	d507      	bpl.n	80008da <HAL_RCC_OscConfig+0x382>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80008ca:	2000      	movs	r0, #0
 80008cc:	e017      	b.n	80008fe <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ce:	f000 fa0f 	bl	8000cf0 <HAL_GetTick>
 80008d2:	1bc0      	subs	r0, r0, r7
 80008d4:	2864      	cmp	r0, #100	; 0x64
 80008d6:	d9c5      	bls.n	8000864 <HAL_RCC_OscConfig+0x30c>
 80008d8:	e67a      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008da:	f000 fa09 	bl	8000cf0 <HAL_GetTick>
 80008de:	1b00      	subs	r0, r0, r4
 80008e0:	2864      	cmp	r0, #100	; 0x64
 80008e2:	d9ef      	bls.n	80008c4 <HAL_RCC_OscConfig+0x36c>
 80008e4:	e674      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008e6:	f000 fa03 	bl	8000cf0 <HAL_GetTick>
 80008ea:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	019b      	lsls	r3, r3, #6
 80008f0:	d5eb      	bpl.n	80008ca <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008f2:	f000 f9fd 	bl	8000cf0 <HAL_GetTick>
 80008f6:	1b00      	subs	r0, r0, r4
 80008f8:	2864      	cmp	r0, #100	; 0x64
 80008fa:	d9f7      	bls.n	80008ec <HAL_RCC_OscConfig+0x394>
 80008fc:	e668      	b.n	80005d0 <HAL_RCC_OscConfig+0x78>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008fe:	b002      	add	sp, #8
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000908:	4a6c      	ldr	r2, [pc, #432]	; (8000abc <HAL_RCC_ClockConfig+0x1b4>)
 800090a:	6813      	ldr	r3, [r2, #0]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	4604      	mov	r4, r0
 8000918:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800091a:	d266      	bcs.n	80009ea <HAL_RCC_ClockConfig+0xe2>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f023 030f 	bic.w	r3, r3, #15
 8000922:	430b      	orrs	r3, r1
 8000924:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000926:	6813      	ldr	r3, [r2, #0]
 8000928:	f003 030f 	and.w	r3, r3, #15
 800092c:	4299      	cmp	r1, r3
 800092e:	d002      	beq.n	8000936 <HAL_RCC_ClockConfig+0x2e>
    {
      return HAL_ERROR;
 8000930:	2001      	movs	r0, #1
 8000932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000936:	6801      	ldr	r1, [r0, #0]
 8000938:	078f      	lsls	r7, r1, #30
 800093a:	d506      	bpl.n	800094a <HAL_RCC_ClockConfig+0x42>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800093c:	4860      	ldr	r0, [pc, #384]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800093e:	6883      	ldr	r3, [r0, #8]
 8000940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000944:	68a3      	ldr	r3, [r4, #8]
 8000946:	4313      	orrs	r3, r2
 8000948:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800094a:	07ce      	lsls	r6, r1, #31
 800094c:	d40b      	bmi.n	8000966 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800094e:	6821      	ldr	r1, [r4, #0]
 8000950:	074d      	lsls	r5, r1, #29
 8000952:	f140 80a3 	bpl.w	8000a9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000956:	485a      	ldr	r0, [pc, #360]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8000958:	6883      	ldr	r3, [r0, #8]
 800095a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800095e:	68e3      	ldr	r3, [r4, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	6083      	str	r3, [r0, #8]
 8000964:	e09a      	b.n	8000a9c <HAL_RCC_ClockConfig+0x194>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000966:	6862      	ldr	r2, [r4, #4]
 8000968:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800096a:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096c:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096e:	d102      	bne.n	8000976 <HAL_RCC_ClockConfig+0x6e>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000970:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8000974:	e006      	b.n	8000984 <HAL_RCC_ClockConfig+0x7c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000976:	2a02      	cmp	r2, #2
 8000978:	d102      	bne.n	8000980 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800097a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800097e:	e001      	b.n	8000984 <HAL_RCC_ClockConfig+0x7c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000980:	f011 0f02 	tst.w	r1, #2
 8000984:	d0d4      	beq.n	8000930 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000986:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000988:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800098c:	4e4c      	ldr	r6, [pc, #304]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800098e:	f021 0103 	bic.w	r1, r1, #3
 8000992:	430a      	orrs	r2, r1
 8000994:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000996:	f000 f9ab 	bl	8000cf0 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099a:	6863      	ldr	r3, [r4, #4]
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800099c:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10c      	bne.n	80009bc <HAL_RCC_ClockConfig+0xb4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009a2:	68b3      	ldr	r3, [r6, #8]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d0d0      	beq.n	800094e <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f000 f9a0 	bl	8000cf0 <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	42b8      	cmp	r0, r7
 80009b4:	d9f5      	bls.n	80009a2 <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80009b6:	2003      	movs	r0, #3
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d10f      	bne.n	80009e0 <HAL_RCC_ClockConfig+0xd8>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009c0:	68b3      	ldr	r3, [r6, #8]
 80009c2:	f003 030c 	and.w	r3, r3, #12
 80009c6:	2b08      	cmp	r3, #8
 80009c8:	d0c1      	beq.n	800094e <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ca:	f000 f991 	bl	8000cf0 <HAL_GetTick>
 80009ce:	1b40      	subs	r0, r0, r5
 80009d0:	42b8      	cmp	r0, r7
 80009d2:	d9f5      	bls.n	80009c0 <HAL_RCC_ClockConfig+0xb8>
 80009d4:	e7ef      	b.n	80009b6 <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d6:	f000 f98b 	bl	8000cf0 <HAL_GetTick>
 80009da:	1b40      	subs	r0, r0, r5
 80009dc:	42b8      	cmp	r0, r7
 80009de:	d8ea      	bhi.n	80009b6 <HAL_RCC_ClockConfig+0xae>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009e0:	68b3      	ldr	r3, [r6, #8]
 80009e2:	f013 0f0c 	tst.w	r3, #12
 80009e6:	d1f6      	bne.n	80009d6 <HAL_RCC_ClockConfig+0xce>
 80009e8:	e7b1      	b.n	800094e <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009ea:	6801      	ldr	r1, [r0, #0]
 80009ec:	0788      	lsls	r0, r1, #30
 80009ee:	d506      	bpl.n	80009fe <HAL_RCC_ClockConfig+0xf6>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009f0:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 80009f2:	6883      	ldr	r3, [r0, #8]
 80009f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009f8:	68a3      	ldr	r3, [r4, #8]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009fe:	07ca      	lsls	r2, r1, #31
 8000a00:	d40b      	bmi.n	8000a1a <HAL_RCC_ClockConfig+0x112>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <HAL_RCC_ClockConfig+0x1b4>)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f023 030f 	bic.w	r3, r3, #15
 8000a0a:	432b      	orrs	r3, r5
 8000a0c:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	429d      	cmp	r5, r3
 8000a16:	d18b      	bne.n	8000930 <HAL_RCC_ClockConfig+0x28>
 8000a18:	e799      	b.n	800094e <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a1a:	6862      	ldr	r2, [r4, #4]
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8000a1e:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a20:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a22:	d102      	bne.n	8000a2a <HAL_RCC_ClockConfig+0x122>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a24:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8000a28:	e006      	b.n	8000a38 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a2a:	2a02      	cmp	r2, #2
 8000a2c:	d102      	bne.n	8000a34 <HAL_RCC_ClockConfig+0x12c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a2e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8000a32:	e001      	b.n	8000a38 <HAL_RCC_ClockConfig+0x130>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a34:	f011 0f02 	tst.w	r1, #2
 8000a38:	f43f af7a 	beq.w	8000930 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a3c:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a3e:	f241 3888 	movw	r8, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a42:	4f1f      	ldr	r7, [pc, #124]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a44:	f021 0103 	bic.w	r1, r1, #3
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a4c:	f000 f950 	bl	8000cf0 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a50:	6863      	ldr	r3, [r4, #4]
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10a      	bne.n	8000a6e <HAL_RCC_ClockConfig+0x166>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d0cf      	beq.n	8000a02 <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a62:	f000 f945 	bl	8000cf0 <HAL_GetTick>
 8000a66:	1b80      	subs	r0, r0, r6
 8000a68:	4540      	cmp	r0, r8
 8000a6a:	d9f5      	bls.n	8000a58 <HAL_RCC_ClockConfig+0x150>
 8000a6c:	e7a3      	b.n	80009b6 <HAL_RCC_ClockConfig+0xae>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d10f      	bne.n	8000a92 <HAL_RCC_ClockConfig+0x18a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f003 030c 	and.w	r3, r3, #12
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d0c2      	beq.n	8000a02 <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a7c:	f000 f938 	bl	8000cf0 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	4540      	cmp	r0, r8
 8000a84:	d9f5      	bls.n	8000a72 <HAL_RCC_ClockConfig+0x16a>
 8000a86:	e796      	b.n	80009b6 <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a88:	f000 f932 	bl	8000cf0 <HAL_GetTick>
 8000a8c:	1b80      	subs	r0, r0, r6
 8000a8e:	4540      	cmp	r0, r8
 8000a90:	d891      	bhi.n	80009b6 <HAL_RCC_ClockConfig+0xae>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	f013 0f0c 	tst.w	r3, #12
 8000a98:	d1f6      	bne.n	8000a88 <HAL_RCC_ClockConfig+0x180>
 8000a9a:	e7b2      	b.n	8000a02 <HAL_RCC_ClockConfig+0xfa>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a9c:	070b      	lsls	r3, r1, #28
 8000a9e:	d507      	bpl.n	8000ab0 <HAL_RCC_ClockConfig+0x1a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8000aa2:	6921      	ldr	r1, [r4, #16]
 8000aa4:	6893      	ldr	r3, [r2, #8]
 8000aa6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000aaa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000aae:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f000 f8f1 	bl	8000c98 <HAL_InitTick>
  
  return HAL_OK;
 8000ab6:	2000      	movs	r0, #0
}
 8000ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000abc:	40023c00 	.word	0x40023c00
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ac4:	491b      	ldr	r1, [pc, #108]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x70>)
 8000ac6:	688b      	ldr	r3, [r1, #8]
 8000ac8:	f003 030c 	and.w	r3, r3, #12
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d02c      	beq.n	8000b2a <HAL_RCC_GetSysClockFreq+0x66>
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d12c      	bne.n	8000b2e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad4:	6848      	ldr	r0, [r1, #4]
 8000ad6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ada:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000adc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ae0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ae4:	684b      	ldr	r3, [r1, #4]
 8000ae6:	fa92 f2a2 	rbit	r2, r2
 8000aea:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	ea01 0103 	and.w	r1, r1, r3
 8000af6:	fa21 f102 	lsr.w	r1, r1, r2
 8000afa:	bf14      	ite	ne
 8000afc:	4a0e      	ldrne	r2, [pc, #56]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000afe:	4a0f      	ldreq	r2, [pc, #60]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x78>)
 8000b00:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b06:	fb00 f301 	mul.w	r3, r0, r1
 8000b0a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b0e:	6852      	ldr	r2, [r2, #4]
 8000b10:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000b14:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b18:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000b1c:	fa22 f000 	lsr.w	r0, r2, r0
 8000b20:	3001      	adds	r0, #1
 8000b22:	0040      	lsls	r0, r0, #1
 8000b24:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b28:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x74>)
 8000b2c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	017d7840 	.word	0x017d7840
 8000b3c:	00f42400 	.word	0x00f42400

08000b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b40:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000b42:	f7ff ffbf 	bl	8000ac4 <HAL_RCC_GetSysClockFreq>
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_RCC_GetHCLKFreq+0x28>)
 8000b48:	22f0      	movs	r2, #240	; 0xf0
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	fa92 f2a2 	rbit	r2, r2
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b58:	40d3      	lsrs	r3, r2
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8000b5c:	5cd3      	ldrb	r3, [r2, r3]
 8000b5e:	40d8      	lsrs	r0, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8000b62:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000b64:	bd08      	pop	{r3, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	08003421 	.word	0x08003421
 8000b70:	20000000 	.word	0x20000000

08000b74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000b76:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000b7a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000b7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000b90:	60d3      	str	r3, [r2, #12]
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_NVIC_SetPriority+0x68>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	2c04      	cmp	r4, #4
 8000baa:	bf28      	it	cs
 8000bac:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	2d06      	cmp	r5, #6

  return (
 8000bb0:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb4:	bf8c      	ite	hi
 8000bb6:	3b03      	subhi	r3, #3
 8000bb8:	2300      	movls	r3, #0

  return (
 8000bba:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000bbe:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000bc0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000bc4:	ea04 0401 	and.w	r4, r4, r1
 8000bc8:	fa04 f403 	lsl.w	r4, r4, r3
 8000bcc:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bd4:	ea02 0203 	and.w	r2, r2, r3
 8000bd8:	ea42 0204 	orr.w	r2, r2, r4
 8000bdc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000be0:	da05      	bge.n	8000bee <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	f000 000f 	and.w	r0, r0, #15
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_NVIC_SetPriority+0x6c>)
 8000bea:	541a      	strb	r2, [r3, r0]
 8000bec:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bf8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000bfc:	bd30      	pop	{r4, r5, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	e000ed14 	.word	0xe000ed14

08000c08 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c08:	0942      	lsrs	r2, r0, #5
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f000 001f 	and.w	r0, r0, #31
 8000c10:	fa03 f000 	lsl.w	r0, r3, r0
 8000c14:	4b01      	ldr	r3, [pc, #4]	; (8000c1c <HAL_NVIC_EnableIRQ+0x14>)
 8000c16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	3801      	subs	r0, #1
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d20a      	bcs.n	8000c3e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	21f0      	movs	r1, #240	; 0xf0
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c4c:	7843      	ldrb	r3, [r0, #1]
 8000c4e:	4911      	ldr	r1, [pc, #68]	; (8000c94 <HAL_MPU_ConfigRegion+0x48>)
 8000c50:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 8000c52:	7803      	ldrb	r3, [r0, #0]
 8000c54:	b1db      	cbz	r3, 8000c8e <HAL_MPU_ConfigRegion+0x42>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000c56:	6843      	ldr	r3, [r0, #4]
 8000c58:	60cb      	str	r3, [r1, #12]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c5a:	7ac3      	ldrb	r3, [r0, #11]
 8000c5c:	7b02      	ldrb	r2, [r0, #12]
 8000c5e:	061b      	lsls	r3, r3, #24
 8000c60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c64:	7802      	ldrb	r2, [r0, #0]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	7a82      	ldrb	r2, [r0, #10]
 8000c6a:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8000c6e:	7b42      	ldrb	r2, [r0, #13]
 8000c70:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8000c74:	7b82      	ldrb	r2, [r0, #14]
 8000c76:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000c7a:	7bc2      	ldrb	r2, [r0, #15]
 8000c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c80:	7a42      	ldrb	r2, [r0, #9]
 8000c82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c86:	7a02      	ldrb	r2, [r0, #8]
 8000c88:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000c8c:	e000      	b.n	8000c90 <HAL_MPU_ConfigRegion+0x44>
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000c8e:	60cb      	str	r3, [r1, #12]
    MPU->RASR = 0x00;
 8000c90:	610b      	str	r3, [r1, #16]
 8000c92:	4770      	bx	lr
 8000c94:	e000ed90 	.word	0xe000ed90

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c9c:	f7ff ff50 	bl	8000b40 <HAL_RCC_GetHCLKFreq>
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca8:	f7ff ffba 	bl	8000c20 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	4621      	mov	r1, r4
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb4:	f7ff ff70 	bl	8000b98 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000cb8:	2000      	movs	r0, #0
 8000cba:	bd10      	pop	{r4, pc}

08000cbc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc8:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cca:	f7ff ff53 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f7ff ffe2 	bl	8000c98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fad7 	bl	8000286 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000cd8:	2000      	movs	r0, #0
 8000cda:	bd08      	pop	{r3, pc}
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ce0:	4a02      	ldr	r2, [pc, #8]	; (8000cec <HAL_IncTick+0xc>)
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000045c 	.word	0x2000045c

08000cf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <HAL_GetTick+0x8>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000045c 	.word	0x2000045c

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000cfc:	b513      	push	{r0, r1, r4, lr}
 8000cfe:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000d00:	f7ff fff6 	bl	8000cf0 <HAL_GetTick>
 8000d04:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000d06:	f7ff fff3 	bl	8000cf0 <HAL_GetTick>
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	1b00      	subs	r0, r0, r4
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d3f9      	bcc.n	8000d06 <HAL_Delay+0xa>
  {
  }
}
 8000d12:	b002      	add	sp, #8
 8000d14:	bd10      	pop	{r4, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1c:	4f72      	ldr	r7, [pc, #456]	; (8000ee8 <HAL_GPIO_Init+0x1d0>)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1e:	b085      	sub	sp, #20
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d20:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d22:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8000ef0 <HAL_GPIO_Init+0x1d8>
 8000d28:	46be      	mov	lr, r7

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000ef4 <HAL_GPIO_Init+0x1dc>
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	9301      	str	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d30:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000d32:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d34:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000d36:	ea34 0303 	bics.w	r3, r4, r3
 8000d3a:	f040 80cd 	bne.w	8000ed8 <HAL_GPIO_Init+0x1c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3e:	684d      	ldr	r5, [r1, #4]
 8000d40:	f025 0a10 	bic.w	sl, r5, #16
 8000d44:	f1ba 0f02 	cmp.w	sl, #2
 8000d48:	d114      	bne.n	8000d74 <HAL_GPIO_Init+0x5c>
 8000d4a:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d4e:	f002 0b07 	and.w	fp, r2, #7
 8000d52:	230f      	movs	r3, #15
 8000d54:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8000d58:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d5c:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d60:	fa03 f30b 	lsl.w	r3, r3, fp
 8000d64:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d68:	690b      	ldr	r3, [r1, #16]
 8000d6a:	fa03 f30b 	lsl.w	r3, r3, fp
 8000d6e:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3] = temp;
 8000d70:	f8c9 3020 	str.w	r3, [r9, #32]
 8000d74:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d78:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d7e:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d82:	fa09 f90b 	lsl.w	r9, r9, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d8a:	fa06 f60b 	lsl.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d8e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d92:	f1ba 0f01 	cmp.w	sl, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d96:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d9a:	ea43 0306 	orr.w	r3, r3, r6
      GPIOx->MODER = temp;
 8000d9e:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da0:	d80f      	bhi.n	8000dc2 <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000da4:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da6:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8000daa:	fa06 f60b 	lsl.w	r6, r6, fp
 8000dae:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000db0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000db2:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000db8:	4096      	lsls	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dbe:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000dc0:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dc2:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dc4:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dc8:	688b      	ldr	r3, [r1, #8]
 8000dca:	fa03 f30b 	lsl.w	r3, r3, fp
 8000dce:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000dd2:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd4:	00eb      	lsls	r3, r5, #3
 8000dd6:	d57f      	bpl.n	8000ed8 <HAL_GPIO_Init+0x1c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f022 0903 	bic.w	r9, r2, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dde:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000de8:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dec:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000df0:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x1d4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dfa:	4298      	cmp	r0, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000e00:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000e04:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000e08:	9603      	str	r6, [sp, #12]
 8000e0a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e0c:	f04f 060f 	mov.w	r6, #15
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000e10:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e14:	fa06 f60a 	lsl.w	r6, r6, sl
 8000e18:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1c:	d024      	beq.n	8000e68 <HAL_GPIO_Init+0x150>
 8000e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e22:	4298      	cmp	r0, r3
 8000e24:	d022      	beq.n	8000e6c <HAL_GPIO_Init+0x154>
 8000e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d020      	beq.n	8000e70 <HAL_GPIO_Init+0x158>
 8000e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d01e      	beq.n	8000e74 <HAL_GPIO_Init+0x15c>
 8000e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d01c      	beq.n	8000e78 <HAL_GPIO_Init+0x160>
 8000e3e:	4540      	cmp	r0, r8
 8000e40:	d01c      	beq.n	8000e7c <HAL_GPIO_Init+0x164>
 8000e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d01a      	beq.n	8000e80 <HAL_GPIO_Init+0x168>
 8000e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d018      	beq.n	8000e84 <HAL_GPIO_Init+0x16c>
 8000e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d016      	beq.n	8000e88 <HAL_GPIO_Init+0x170>
 8000e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	bf14      	ite	ne
 8000e62:	230a      	movne	r3, #10
 8000e64:	2309      	moveq	r3, #9
 8000e66:	e010      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e00e      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e00c      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e00a      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e74:	2303      	movs	r3, #3
 8000e76:	e008      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e006      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e004      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e84:	2307      	movs	r3, #7
 8000e86:	e000      	b.n	8000e8a <HAL_GPIO_Init+0x172>
 8000e88:	2308      	movs	r3, #8
 8000e8a:	fa03 f30a 	lsl.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e92:	ea43 0306 	orr.w	r3, r3, r6
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000e96:	ea6f 0604 	mvn.w	r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e9a:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9e:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	bf0c      	ite	eq
 8000ea2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000ea4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000eaa:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000eae:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	bf0c      	ite	eq
 8000eb4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000eb6:	4323      	orrne	r3, r4
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000ebc:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	bf0c      	ite	eq
 8000ec2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000ec4:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec6:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000ec8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000ecc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	bf54      	ite	pl
 8000ed2:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000ed4:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000ed6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ed8:	3201      	adds	r2, #1
 8000eda:	2a10      	cmp	r2, #16
 8000edc:	f47f af28 	bne.w	8000d30 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000ee0:	b005      	add	sp, #20
 8000ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013c00 	.word	0x40013c00
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40021400 	.word	0x40021400

08000ef8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	b902      	cbnz	r2, 8000efc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	6181      	str	r1, [r0, #24]
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f00:	6943      	ldr	r3, [r0, #20]
 8000f02:	4059      	eors	r1, r3
 8000f04:	6141      	str	r1, [r0, #20]
 8000f06:	4770      	bx	lr

08000f08 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f10:	4c19      	ldr	r4, [pc, #100]	; (8000f78 <HAL_PWREx_EnableOverDrive+0x70>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f14:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2e:	f7ff fedf 	bl	8000cf0 <HAL_GetTick>
 8000f32:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f34:	686b      	ldr	r3, [r5, #4]
 8000f36:	4c10      	ldr	r4, [pc, #64]	; (8000f78 <HAL_PWREx_EnableOverDrive+0x70>)
 8000f38:	03da      	lsls	r2, r3, #15
 8000f3a:	d407      	bmi.n	8000f4c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f3c:	f7ff fed8 	bl	8000cf0 <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f46:	d9f5      	bls.n	8000f34 <HAL_PWREx_EnableOverDrive+0x2c>
    {
      return HAL_TIMEOUT;
 8000f48:	2003      	movs	r0, #3
 8000f4a:	e011      	b.n	8000f70 <HAL_PWREx_EnableOverDrive+0x68>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff fecc 	bl	8000cf0 <HAL_GetTick>
 8000f58:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	039b      	lsls	r3, r3, #14
 8000f5e:	d406      	bmi.n	8000f6e <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f60:	f7ff fec6 	bl	8000cf0 <HAL_GetTick>
 8000f64:	1b40      	subs	r0, r0, r5
 8000f66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f6a:	d9f6      	bls.n	8000f5a <HAL_PWREx_EnableOverDrive+0x52>
 8000f6c:	e7ec      	b.n	8000f48 <HAL_PWREx_EnableOverDrive+0x40>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	b002      	add	sp, #8
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f80:	4c22      	ldr	r4, [pc, #136]	; (800100c <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f82:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f84:	4d22      	ldr	r5, [pc, #136]	; (8001010 <BSP_SDRAM_Initialization_sequence+0x94>)
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 8000f86:	f04f 0800 	mov.w	r8, #0
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f8a:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f8c:	4621      	mov	r1, r4
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f8e:	4681      	mov	r9, r0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f94:	4628      	mov	r0, r5
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 8000f96:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8000f9a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000f9c:	f8c4 800c 	str.w	r8, [r4, #12]
{
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fa0:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fa4:	f001 fb00 	bl	80025a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f7ff fea7 	bl	8000cfc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000fae:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	4628      	mov	r0, r5
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8000fb8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000fba:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fbe:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fc2:	f001 faf1 	bl	80025a8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fc6:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	4628      	mov	r0, r5
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8000fd0:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fd4:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fdc:	f001 fae4 	bl	80025a8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000fe0:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4628      	mov	r0, r5

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000fec:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000fee:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8000ff0:	60a6      	str	r6, [r4, #8]
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ff2:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ffa:	f001 fad5 	bl	80025a8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000ffe:	4649      	mov	r1, r9
 8001000:	4628      	mov	r0, r5
 8001002:	f001 fae8 	bl	80025d6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001006:	b003      	add	sp, #12
 8001008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800100c:	20000460 	.word	0x20000460
 8001010:	200004c8 	.word	0x200004c8

08001014 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001014:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001016:	4b59      	ldr	r3, [pc, #356]	; (800117c <BSP_SDRAM_MspInit+0x168>)
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001018:	b08e      	sub	sp, #56	; 0x38
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800101a:	2500      	movs	r5, #0
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800101c:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800101e:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001020:	4857      	ldr	r0, [pc, #348]	; (8001180 <BSP_SDRAM_MspInit+0x16c>)
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001022:	9501      	str	r5, [sp, #4]
 8001024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
 800102c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800102e:	f002 0201 	and.w	r2, r2, #1
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001036:	9502      	str	r5, [sp, #8]
 8001038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
 8001040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001042:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001046:	9202      	str	r2, [sp, #8]
 8001048:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	9503      	str	r5, [sp, #12]
 800104c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104e:	f042 0204 	orr.w	r2, r2, #4
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
 8001054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001056:	f002 0204 	and.w	r2, r2, #4
 800105a:	9203      	str	r2, [sp, #12]
 800105c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	9504      	str	r5, [sp, #16]
 8001060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	f002 0208 	and.w	r2, r2, #8
 800106e:	9204      	str	r2, [sp, #16]
 8001070:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	9505      	str	r5, [sp, #20]
 8001074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001076:	f042 0210 	orr.w	r2, r2, #16
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
 800107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107e:	f002 0210 	and.w	r2, r2, #16
 8001082:	9205      	str	r2, [sp, #20]
 8001084:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001086:	9506      	str	r5, [sp, #24]
 8001088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f002 0220 	and.w	r2, r2, #32
 8001096:	9206      	str	r2, [sp, #24]
 8001098:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109a:	9507      	str	r5, [sp, #28]
 800109c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010aa:	9207      	str	r2, [sp, #28]
 80010ac:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	9508      	str	r5, [sp, #32]
 80010b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80010b8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80010bc:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	9308      	str	r3, [sp, #32]
 80010c4:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80010ca:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80010cc:	230c      	movs	r3, #12
 80010ce:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80010d6:	4621      	mov	r1, r4
 80010d8:	f7ff fe1e 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80010dc:	f24c 730b 	movw	r3, #50955	; 0xc70b
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80010e0:	4621      	mov	r1, r4
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <BSP_SDRAM_MspInit+0x170>)
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80010e4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80010e6:	f7ff fe17 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80010ea:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80010ee:	4621      	mov	r1, r4
 80010f0:	4825      	ldr	r0, [pc, #148]	; (8001188 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80010f2:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80010f4:	f7ff fe10 	bl	8000d18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80010f8:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80010fc:	4621      	mov	r1, r4
 80010fe:	4823      	ldr	r0, [pc, #140]	; (800118c <BSP_SDRAM_MspInit+0x178>)
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001100:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001102:	f7ff fe09 	bl	8000d18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001106:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800110a:	4621      	mov	r1, r4
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <BSP_SDRAM_MspInit+0x17c>)
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800110e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001110:	f7ff fe02 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001114:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001116:	4621      	mov	r1, r4
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <BSP_SDRAM_MspInit+0x180>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800111a:	4c1f      	ldr	r4, [pc, #124]	; (8001198 <BSP_SDRAM_MspInit+0x184>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800111c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800111e:	f7ff fdfb 	bl	8000d18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001122:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001124:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001126:	4620      	mov	r0, r4
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001128:	6334      	str	r4, [r6, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800112a:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800112c:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001130:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001132:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001138:	61e5      	str	r5, [r4, #28]
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800113a:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001140:	6265      	str	r5, [r4, #36]	; 0x24
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001142:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001148:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800114a:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800114c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001150:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001152:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001154:	2303      	movs	r3, #3
 8001156:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <BSP_SDRAM_MspInit+0x188>)
 800115a:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800115c:	f001 f9e0 	bl	8002520 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001160:	4620      	mov	r0, r4
 8001162:	f001 f9a3 	bl	80024ac <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001166:	462a      	mov	r2, r5
 8001168:	2105      	movs	r1, #5
 800116a:	2038      	movs	r0, #56	; 0x38
 800116c:	f7ff fd14 	bl	8000b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001170:	2038      	movs	r0, #56	; 0x38
 8001172:	f7ff fd49 	bl	8000c08 <HAL_NVIC_EnableIRQ>
}
 8001176:	b00e      	add	sp, #56	; 0x38
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40021c00 	.word	0x40021c00
 8001198:	20000470 	.word	0x20000470
 800119c:	40026410 	.word	0x40026410

080011a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80011a0:	b538      	push	{r3, r4, r5, lr}
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011a2:	4c1a      	ldr	r4, [pc, #104]	; (800120c <BSP_SDRAM_Init+0x6c>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
 80011a4:	2107      	movs	r1, #7
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <BSP_SDRAM_Init+0x70>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 80011a8:	2204      	movs	r2, #4
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80011aa:	4d1a      	ldr	r5, [pc, #104]	; (8001214 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80011ac:	4620      	mov	r0, r4
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011ae:	6023      	str	r3, [r4, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80011b0:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 80011b2:	6069      	str	r1, [r5, #4]
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80011b4:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
 80011b6:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80011b8:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80011ba:	61ab      	str	r3, [r5, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80011bc:	2310      	movs	r3, #16
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
 80011be:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80011c0:	2100      	movs	r1, #0
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80011c2:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011c4:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80011c6:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011c8:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011ce:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80011d0:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80011d6:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011d8:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011de:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80011e0:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80011e2:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 80011e4:	60aa      	str	r2, [r5, #8]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80011e6:	f7ff ff15 	bl	8001014 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f001 f9bb 	bl	8002568 <HAL_SDRAM_Init>
 80011f2:	4c09      	ldr	r4, [pc, #36]	; (8001218 <BSP_SDRAM_Init+0x78>)
 80011f4:	b110      	cbz	r0, 80011fc <BSP_SDRAM_Init+0x5c>
  {
    sdramstatus = SDRAM_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	7023      	strb	r3, [r4, #0]
 80011fa:	e000      	b.n	80011fe <BSP_SDRAM_Init+0x5e>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80011fc:	7020      	strb	r0, [r4, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80011fe:	f240 6003 	movw	r0, #1539	; 0x603
 8001202:	f7ff febb 	bl	8000f7c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
}
 8001206:	7820      	ldrb	r0, [r4, #0]
 8001208:	bd38      	pop	{r3, r4, r5, pc}
 800120a:	bf00      	nop
 800120c:	200004c8 	.word	0x200004c8
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200004fc 	.word	0x200004fc
 8001218:	20000004 	.word	0x20000004

0800121c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800121c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001220:	4616      	mov	r6, r2
 8001222:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001224:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800122a:	460d      	mov	r5, r1
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800122c:	f04f 0e34 	mov.w	lr, #52	; 0x34
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001230:	605a      	str	r2, [r3, #4]
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001232:	4680      	mov	r8, r0
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <LL_FillBuffer+0x70>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001236:	9808      	ldr	r0, [sp, #32]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <LL_FillBuffer+0x74>)
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800123c:	60d8      	str	r0, [r3, #12]
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800123e:	fb0e 2201 	mla	r2, lr, r1, r2
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001244:	9c09      	ldr	r4, [sp, #36]	; 0x24
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001246:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001248:	2a02      	cmp	r2, #2
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800124a:	bf18      	it	ne
 800124c:	2200      	movne	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <LL_FillBuffer+0x78>)
 8001252:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001254:	f000 fb31 	bl	80018ba <HAL_DMA2D_Init>
 8001258:	b998      	cbnz	r0, 8001282 <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800125a:	4641      	mov	r1, r8
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <LL_FillBuffer+0x6c>)
 800125e:	f000 fbdb 	bl	8001a18 <HAL_DMA2D_ConfigLayer>
 8001262:	b970      	cbnz	r0, 8001282 <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001264:	9700      	str	r7, [sp, #0]
 8001266:	4633      	mov	r3, r6
 8001268:	462a      	mov	r2, r5
 800126a:	4621      	mov	r1, r4
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <LL_FillBuffer+0x6c>)
 800126e:	f000 fb50 	bl	8001912 <HAL_DMA2D_Start>
 8001272:	b930      	cbnz	r0, 8001282 <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001274:	210a      	movs	r1, #10
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 8001278:	b002      	add	sp, #8
 800127a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800127e:	f000 bb68 	b.w	8001952 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001282:	b002      	add	sp, #8
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	200005dc 	.word	0x200005dc
 800128c:	20000518 	.word	0x20000518
 8001290:	2000051c 	.word	0x2000051c
 8001294:	4002b000 	.word	0x4002b000

08001298 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <BSP_LCD_GetXSize+0x10>)
 800129a:	2134      	movs	r1, #52	; 0x34
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <BSP_LCD_GetXSize+0x14>)
 80012a0:	fb01 3302 	mla	r3, r1, r2, r3
}
 80012a4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80012a6:	4770      	bx	lr
 80012a8:	20000518 	.word	0x20000518
 80012ac:	2000051c 	.word	0x2000051c

080012b0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <BSP_LCD_GetYSize+0x10>)
 80012b2:	2134      	movs	r1, #52	; 0x34
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <BSP_LCD_GetYSize+0x14>)
 80012b8:	fb01 3302 	mla	r3, r1, r2, r3
}
 80012bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80012be:	4770      	bx	lr
 80012c0:	20000518 	.word	0x20000518
 80012c4:	2000051c 	.word	0x2000051c

080012c8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <BSP_LCD_LayerDefaultInit+0x68>)
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80012ca:	2300      	movs	r3, #0
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80012cc:	b530      	push	{r4, r5, lr}
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80012ce:	6812      	ldr	r2, [r2, #0]
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80012d0:	4604      	mov	r4, r0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80012d2:	2534      	movs	r5, #52	; 0x34
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <BSP_LCD_LayerDefaultInit+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80012d6:	b08f      	sub	sp, #60	; 0x3c
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80012d8:	fb05 0202 	mla	r2, r5, r2, r0
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80012dc:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
 80012de:	9303      	str	r3, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012e0:	9305      	str	r3, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
 80012e2:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 80012e4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 80012e8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 80012ec:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80012f4:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
 80012f6:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 80012f8:	21ff      	movs	r1, #255	; 0xff
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80012fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012fc:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012fe:	2307      	movs	r3, #7

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001300:	9204      	str	r2, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
 8001302:	9106      	str	r1, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001304:	a901      	add	r1, sp, #4
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001306:	920c      	str	r2, [sp, #48]	; 0x30
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001308:	4622      	mov	r2, r4
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800130a:	9309      	str	r3, [sp, #36]	; 0x24
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800130c:	9502      	str	r5, [sp, #8]
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800130e:	950b      	str	r5, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001310:	f000 fce6 	bl	8001ce0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001314:	200c      	movs	r0, #12
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <BSP_LCD_LayerDefaultInit+0x70>)
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800131c:	4360      	muls	r0, r4
 800131e:	181a      	adds	r2, r3, r0
 8001320:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001322:	4906      	ldr	r1, [pc, #24]	; (800133c <BSP_LCD_LayerDefaultInit+0x74>)
 8001324:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001326:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800132a:	501a      	str	r2, [r3, r0]
}
 800132c:	b00f      	add	sp, #60	; 0x3c
 800132e:	bd30      	pop	{r4, r5, pc}
 8001330:	20000518 	.word	0x20000518
 8001334:	2000051c 	.word	0x2000051c
 8001338:	200005c4 	.word	0x200005c4
 800133c:	20000008 	.word	0x20000008

08001340 <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <BSP_LCD_SelectLayer+0x8>)
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000518 	.word	0x20000518

0800134c <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <BSP_LCD_SetTextColor+0x10>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	230c      	movs	r3, #12
 8001352:	4353      	muls	r3, r2
 8001354:	4a02      	ldr	r2, [pc, #8]	; (8001360 <BSP_LCD_SetTextColor+0x14>)
 8001356:	50d0      	str	r0, [r2, r3]
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000518 	.word	0x20000518
 8001360:	200005c4 	.word	0x200005c4

08001364 <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <BSP_LCD_Clear+0x24>)
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001366:	b513      	push	{r0, r1, r4, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001368:	681c      	ldr	r4, [r3, #0]
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800136a:	2334      	movs	r3, #52	; 0x34
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <BSP_LCD_Clear+0x28>)
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800136e:	9001      	str	r0, [sp, #4]
 8001370:	4620      	mov	r0, r4
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001372:	fb03 1104 	mla	r1, r3, r4, r1
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001376:	2300      	movs	r3, #0
 8001378:	315c      	adds	r1, #92	; 0x5c
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	c90e      	ldmia	r1, {r1, r2, r3}
 800137e:	f7ff ff4d 	bl	800121c <LL_FillBuffer>
}
 8001382:	b002      	add	sp, #8
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop
 8001388:	20000518 	.word	0x20000518
 800138c:	2000051c 	.word	0x2000051c

08001390 <BSP_LCD_DrawHLine>:
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <BSP_LCD_DrawHLine+0x40>)
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001392:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	2334      	movs	r3, #52	; 0x34
 8001398:	4d0e      	ldr	r5, [pc, #56]	; (80013d4 <BSP_LCD_DrawHLine+0x44>)
 800139a:	fb03 5304 	mla	r3, r3, r4, r5
 800139e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80013a0:	2d02      	cmp	r5, #2
 80013a2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013a6:	fb05 0101 	mla	r1, r5, r1, r0
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <BSP_LCD_DrawHLine+0x48>)
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013ac:	bf0c      	ite	eq
 80013ae:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013b2:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80013b6:	230c      	movs	r3, #12
 80013b8:	4363      	muls	r3, r4
 80013ba:	58c3      	ldr	r3, [r0, r3]
 80013bc:	4620      	mov	r0, r4
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	f7ff ff29 	bl	800121c <LL_FillBuffer>
}
 80013ca:	b003      	add	sp, #12
 80013cc:	bd30      	pop	{r4, r5, pc}
 80013ce:	bf00      	nop
 80013d0:	20000518 	.word	0x20000518
 80013d4:	2000051c 	.word	0x2000051c
 80013d8:	200005c4 	.word	0x200005c4

080013dc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80013dc:	4613      	mov	r3, r2
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <BSP_LCD_DrawVLine+0x4c>)
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80013e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013e2:	6815      	ldr	r5, [r2, #0]
 80013e4:	2434      	movs	r4, #52	; 0x34
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <BSP_LCD_DrawVLine+0x50>)
 80013e8:	fb04 2405 	mla	r4, r4, r5, r2
 80013ec:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80013ee:	2e02      	cmp	r6, #2
 80013f0:	4616      	mov	r6, r2
 80013f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013f4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013f6:	fb02 0101 	mla	r1, r2, r1, r0
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <BSP_LCD_DrawVLine+0x54>)
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013fc:	bf0c      	ite	eq
 80013fe:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001402:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001406:	240c      	movs	r4, #12
 8001408:	436c      	muls	r4, r5
 800140a:	5912      	ldr	r2, [r2, r4]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800140c:	2434      	movs	r4, #52	; 0x34
 800140e:	fb04 6005 	mla	r0, r4, r5, r6
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8001418:	3801      	subs	r0, #1
 800141a:	9000      	str	r0, [sp, #0]
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff fefd 	bl	800121c <LL_FillBuffer>
}
 8001422:	b002      	add	sp, #8
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	bf00      	nop
 8001428:	20000518 	.word	0x20000518
 800142c:	2000051c 	.word	0x2000051c
 8001430:	200005c4 	.word	0x200005c4

08001434 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	461e      	mov	r6, r3
 8001438:	460d      	mov	r5, r1
 800143a:	4607      	mov	r7, r0
 800143c:	4614      	mov	r4, r2
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800143e:	f7ff ffa7 	bl	8001390 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001442:	19a9      	adds	r1, r5, r6
 8001444:	4622      	mov	r2, r4
 8001446:	4638      	mov	r0, r7
 8001448:	b289      	uxth	r1, r1
 800144a:	f7ff ffa1 	bl	8001390 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800144e:	4632      	mov	r2, r6
 8001450:	4629      	mov	r1, r5
 8001452:	4638      	mov	r0, r7
 8001454:	f7ff ffc2 	bl	80013dc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001458:	1938      	adds	r0, r7, r4
 800145a:	4632      	mov	r2, r6
 800145c:	4629      	mov	r1, r5
 800145e:	b280      	uxth	r0, r0
}
 8001460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001464:	f7ff bfba 	b.w	80013dc <BSP_LCD_DrawVLine>

08001468 <BSP_LCD_DrawPixel>:
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <BSP_LCD_DrawPixel+0x2c>)
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800146a:	b530      	push	{r4, r5, lr}
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800146c:	681c      	ldr	r4, [r3, #0]
 800146e:	2534      	movs	r5, #52	; 0x34
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <BSP_LCD_DrawPixel+0x30>)
 8001472:	fb05 3304 	mla	r3, r5, r4, r3
 8001476:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001478:	2c02      	cmp	r4, #2
 800147a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800147e:	fb04 0101 	mla	r1, r4, r1, r0
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001482:	d103      	bne.n	800148c <BSP_LCD_DrawPixel+0x24>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001484:	b292      	uxth	r2, r2
 8001486:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800148a:	bd30      	pop	{r4, r5, pc}
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800148c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001490:	bd30      	pop	{r4, r5, pc}
 8001492:	bf00      	nop
 8001494:	20000518 	.word	0x20000518
 8001498:	2000051c 	.word	0x2000051c

0800149c <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80014a0:	1a15      	subs	r5, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80014a2:	1a5e      	subs	r6, r3, r1
    xinc1 = 1;
    xinc2 = 1;
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80014a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80014a8:	b087      	sub	sp, #28
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80014aa:	2d00      	cmp	r5, #0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
  x = x1;                       /* Start x off at the first pixel */
 80014ac:	fa1f f980 	uxth.w	r9, r0
  y = y1;                       /* Start y off at the first pixel */
 80014b0:	fa1f fa81 	uxth.w	sl, r1
{
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80014b4:	bfb8      	it	lt
 80014b6:	426d      	neglt	r5, r5
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80014b8:	2e00      	cmp	r6, #0
 80014ba:	bfb8      	it	lt
 80014bc:	4276      	neglt	r6, r6
{
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80014be:	b2ad      	uxth	r5, r5
    xinc1 = 1;
    xinc2 = 1;
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80014c0:	4282      	cmp	r2, r0
 80014c2:	bf34      	ite	cc
 80014c4:	4627      	movcc	r7, r4
 80014c6:	2701      	movcs	r7, #1
    yinc1 = 1;
    yinc2 = 1;
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80014c8:	428b      	cmp	r3, r1
 80014ca:	bf34      	ite	cc
 80014cc:	46a0      	movcc	r8, r4
 80014ce:	f04f 0801 	movcs.w	r8, #1
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80014d2:	b2b6      	uxth	r6, r6
 80014d4:	2402      	movs	r4, #2
  {
    yinc1 = -1;
    yinc2 = -1;
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80014d6:	b22a      	sxth	r2, r5
 80014d8:	b233      	sxth	r3, r6
 80014da:	429a      	cmp	r2, r3
 80014dc:	db06      	blt.n	80014ec <BSP_LCD_DrawLine+0x50>
 80014de:	9701      	str	r7, [sp, #4]
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80014e0:	2700      	movs	r7, #0
    den = deltax;
    num = deltax / 2;
 80014e2:	fb92 f4f4 	sdiv	r4, r2, r4
    yinc2 = -1;
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80014e6:	9702      	str	r7, [sp, #8]
    yinc2 = 0;                  /* Don't change the y for every iteration */
    den = deltax;
    num = deltax / 2;
 80014e8:	b2a4      	uxth	r4, r4
 80014ea:	e00b      	b.n	8001504 <BSP_LCD_DrawLine+0x68>
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
    den = deltay;
    num = deltay / 2;
 80014ec:	fb93 f4f4 	sdiv	r4, r3, r4
 80014f0:	462b      	mov	r3, r5
 80014f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80014f6:	4635      	mov	r5, r6
    num_pixels = deltax;         /* There are more x-values than y-values */
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80014f8:	f04f 0800 	mov.w	r8, #0
    den = deltay;
    num = deltay / 2;
 80014fc:	b2a4      	uxth	r4, r4
 80014fe:	461e      	mov	r6, r3
    num_add = deltay;
    num_pixels = deltax;         /* There are more x-values than y-values */
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001500:	f8cd 8004 	str.w	r8, [sp, #4]
    num = deltay / 2;
    num_add = deltax;
    num_pixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001504:	b22a      	sxth	r2, r5
 8001506:	2300      	movs	r3, #0
 8001508:	9204      	str	r2, [sp, #16]
 800150a:	b21a      	sxth	r2, r3
 800150c:	9904      	ldr	r1, [sp, #16]
 800150e:	4291      	cmp	r1, r2
 8001510:	db2b      	blt.n	800156a <BSP_LCD_DrawLine+0xce>
 8001512:	9305      	str	r3, [sp, #20]
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8001514:	fa1f f38a 	uxth.w	r3, sl
 8001518:	220c      	movs	r2, #12
 800151a:	fa1f fb89 	uxth.w	fp, r9
 800151e:	9303      	str	r3, [sp, #12]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8001520:	4434      	add	r4, r6
    num_pixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <BSP_LCD_DrawLine+0xd4>)
 8001524:	4658      	mov	r0, fp
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <BSP_LCD_DrawLine+0xd8>)
 800152a:	434a      	muls	r2, r1
 800152c:	9903      	ldr	r1, [sp, #12]
 800152e:	589a      	ldr	r2, [r3, r2]
 8001530:	f7ff ff9a 	bl	8001468 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
 8001534:	9b04      	ldr	r3, [sp, #16]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8001536:	b2a2      	uxth	r2, r4
 8001538:	b294      	uxth	r4, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 800153a:	b221      	sxth	r1, r4
 800153c:	428b      	cmp	r3, r1
 800153e:	9b05      	ldr	r3, [sp, #20]
 8001540:	dc09      	bgt.n	8001556 <BSP_LCD_DrawLine+0xba>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001542:	1b54      	subs	r4, r2, r5
      x += xinc1;                             /* Change the x as appropriate */
      y += yinc1;                             /* Change the y as appropriate */
 8001544:	9a03      	ldr	r2, [sp, #12]
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
    {
      num -= den;                             /* Calculate the new numerator value */
      x += xinc1;                             /* Change the x as appropriate */
 8001546:	eb0b 0907 	add.w	r9, fp, r7
      y += yinc1;                             /* Change the y as appropriate */
 800154a:	4442      	add	r2, r8
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
    {
      num -= den;                             /* Calculate the new numerator value */
 800154c:	b2a4      	uxth	r4, r4
      x += xinc1;                             /* Change the x as appropriate */
 800154e:	fa1f f989 	uxth.w	r9, r9
      y += yinc1;                             /* Change the y as appropriate */
 8001552:	fa1f fa82 	uxth.w	sl, r2
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001556:	9a01      	ldr	r2, [sp, #4]
 8001558:	3301      	adds	r3, #1
 800155a:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 800155c:	9a02      	ldr	r2, [sp, #8]
 800155e:	4492      	add	sl, r2
    {
      num -= den;                             /* Calculate the new numerator value */
      x += xinc1;                             /* Change the x as appropriate */
      y += yinc1;                             /* Change the y as appropriate */
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001560:	fa1f f989 	uxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8001564:	fa1f fa8a 	uxth.w	sl, sl
 8001568:	e7cf      	b.n	800150a <BSP_LCD_DrawLine+0x6e>
  }
}
 800156a:	b007      	add	sp, #28
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001570:	20000518 	.word	0x20000518
 8001574:	200005c4 	.word	0x200005c4

08001578 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001578:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800157c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <BSP_LCD_DisplayOn+0x2c>)
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	6993      	ldr	r3, [r2, #24]
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800158c:	2201      	movs	r2, #1
 800158e:	f7ff fcb3 	bl	8000ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001592:	2201      	movs	r2, #1
 8001594:	2108      	movs	r1, #8
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <BSP_LCD_DisplayOn+0x30>)
}
 8001598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800159c:	f7ff bcac 	b.w	8000ef8 <HAL_GPIO_WritePin>
 80015a0:	2000051c 	.word	0x2000051c
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40022800 	.word	0x40022800

080015ac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015ae:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <BSP_LCD_MspInit+0x140>)
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80015b0:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015b2:	2200      	movs	r2, #0
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80015b4:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80015b6:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80015b8:	484d      	ldr	r0, [pc, #308]	; (80016f0 <BSP_LCD_MspInit+0x144>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015ba:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80015bc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80015c2:	4e4c      	ldr	r6, [pc, #304]	; (80016f4 <BSP_LCD_MspInit+0x148>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015c4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80015c8:	6459      	str	r1, [r3, #68]	; 0x44
 80015ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015cc:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 80015d0:	9100      	str	r1, [sp, #0]
 80015d2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80015dc:	6319      	str	r1, [r3, #48]	; 0x30
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80015e4:	9101      	str	r1, [sp, #4]
 80015e6:	9901      	ldr	r1, [sp, #4]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e8:	9202      	str	r2, [sp, #8]
 80015ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ec:	f041 0110 	orr.w	r1, r1, #16
 80015f0:	6319      	str	r1, [r3, #48]	; 0x30
 80015f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f4:	f001 0110 	and.w	r1, r1, #16
 80015f8:	9102      	str	r1, [sp, #8]
 80015fa:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fc:	9203      	str	r2, [sp, #12]
 80015fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001600:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001604:	6319      	str	r1, [r3, #48]	; 0x30
 8001606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001608:	f001 0140 	and.w	r1, r1, #64	; 0x40
 800160c:	9103      	str	r1, [sp, #12]
 800160e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001610:	9204      	str	r2, [sp, #16]
 8001612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001614:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001618:	6319      	str	r1, [r3, #48]	; 0x30
 800161a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8001620:	9104      	str	r1, [sp, #16]
 8001622:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001624:	9205      	str	r2, [sp, #20]
 8001626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001628:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800162c:	6319      	str	r1, [r3, #48]	; 0x30
 800162e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001630:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001634:	9105      	str	r1, [sp, #20]
 8001636:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001638:	9206      	str	r2, [sp, #24]
 800163a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001640:	6319      	str	r1, [r3, #48]	; 0x30
 8001642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001644:	f401 6180 	and.w	r1, r1, #1024	; 0x400
 8001648:	9106      	str	r1, [sp, #24]
 800164a:	9906      	ldr	r1, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 800164c:	9207      	str	r2, [sp, #28]
 800164e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001650:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001654:	6319      	str	r1, [r3, #48]	; 0x30
 8001656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001658:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800165c:	9107      	str	r1, [sp, #28]
 800165e:	9907      	ldr	r1, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001660:	9208      	str	r2, [sp, #32]
 8001662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001664:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001668:	6319      	str	r1, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800166a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800166e:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001674:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001676:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001678:	9308      	str	r3, [sp, #32]
 800167a:	9b08      	ldr	r3, [sp, #32]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800167c:	2310      	movs	r3, #16
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800167e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001680:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001682:	f7ff fb49 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001686:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001688:	a909      	add	r1, sp, #36	; 0x24
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800168c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800168e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001690:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001692:	f7ff fb41 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8001696:	f44f 4367 	mov.w	r3, #59136	; 0xe700
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800169a:	a909      	add	r1, sp, #36	; 0x24
 800169c:	4630      	mov	r0, r6
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800169e:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 80016a0:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80016a2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016a4:	f7ff fb38 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80016a8:	f64e 73ff 	movw	r3, #61439	; 0xefff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80016ac:	a909      	add	r1, sp, #36	; 0x24
 80016ae:	4813      	ldr	r0, [pc, #76]	; (80016fc <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80016b0:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016b2:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80016b4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80016b6:	f7ff fb2f 	bl	8000d18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016ba:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80016bc:	23f7      	movs	r3, #247	; 0xf7
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80016be:	4c10      	ldr	r4, [pc, #64]	; (8001700 <BSP_LCD_MspInit+0x154>)
 80016c0:	a909      	add	r1, sp, #36	; 0x24

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80016c2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80016c4:	2501      	movs	r5, #1
  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80016c6:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80016c8:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80016ca:	f7ff fb25 	bl	8000d18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80016ce:	a909      	add	r1, sp, #36	; 0x24
 80016d0:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80016d2:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80016d4:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80016d6:	f7ff fb1f 	bl	8000d18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80016da:	2308      	movs	r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80016dc:	a909      	add	r1, sp, #36	; 0x24
 80016de:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80016e0:	950a      	str	r5, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80016e2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80016e4:	f7ff fb18 	bl	8000d18 <HAL_GPIO_Init>
}
 80016e8:	b00f      	add	sp, #60	; 0x3c
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40022000 	.word	0x40022000
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40022400 	.word	0x40022400
 8001700:	40022800 	.word	0x40022800

08001704 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <BSP_LCD_ClockConfig+0x18>)
 8001706:	2308      	movs	r3, #8
 8001708:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800170e:	2305      	movs	r3, #5
 8001710:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001716:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001718:	f000 bb0e 	b.w	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 800171c:	2000061c 	.word	0x2000061c

08001720 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001720:	b510      	push	{r4, lr}
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	4c26      	ldr	r4, [pc, #152]	; (80017c0 <BSP_LCD_Init+0xa0>)
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001726:	2100      	movs	r1, #0
{    
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001728:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800172a:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800172c:	4620      	mov	r0, r4
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800172e:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001730:	2335      	movs	r3, #53	; 0x35
 8001732:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001734:	230b      	movs	r3, #11
 8001736:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001738:	f240 131b 	movw	r3, #283	; 0x11b
 800173c:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800173e:	f240 2315 	movw	r3, #533	; 0x215
 8001742:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001744:	f240 131d 	movw	r3, #285	; 0x11d
 8001748:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800174a:	f240 2335 	movw	r3, #565	; 0x235
 800174e:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001750:	f7ff ffd8 	bl	8001704 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001754:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hLtdcHandler.Instance = LTDC;

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001758:	4620      	mov	r0, r4
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800175a:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800175c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001760:	6663      	str	r3, [r4, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001768:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800176c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001770:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001772:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001774:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001776:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <BSP_LCD_Init+0xa4>)
 800177a:	6023      	str	r3, [r4, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800177c:	f000 fad9 	bl	8001d32 <HAL_LTDC_GetState>
 8001780:	4601      	mov	r1, r0
 8001782:	b910      	cbnz	r0, 800178a <BSP_LCD_Init+0x6a>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff ff11 	bl	80015ac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <BSP_LCD_Init+0xa0>)
 800178c:	f000 fa34 	bl	8001bf8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <BSP_LCD_Init+0xa8>)
 8001798:	f7ff fbae 	bl	8000ef8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	2108      	movs	r1, #8
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <BSP_LCD_Init+0xac>)
 80017a2:	f7ff fba9 	bl	8000ef8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80017a6:	f7ff fcfb 	bl	80011a0 <BSP_SDRAM_Init>
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <BSP_LCD_Init+0xb0>)
 80017ac:	210c      	movs	r1, #12
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 80017ae:	2000      	movs	r0, #0
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <BSP_LCD_Init+0xb4>)
 80017b4:	fb01 3302 	mla	r3, r1, r2, r3
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <BSP_LCD_Init+0xb8>)
 80017ba:	609a      	str	r2, [r3, #8]
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	2000051c 	.word	0x2000051c
 80017c4:	40016800 	.word	0x40016800
 80017c8:	40022000 	.word	0x40022000
 80017cc:	40022800 	.word	0x40022800
 80017d0:	20000518 	.word	0x20000518
 80017d4:	200005c4 	.word	0x200005c4
 80017d8:	20000008 	.word	0x20000008

080017dc <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017dc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 80017de:	4604      	mov	r4, r0
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017e0:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 80017e2:	b9d0      	cbnz	r0, 800181a <BSP_LED_Init+0x3e>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <BSP_LED_Init+0x44>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 80017e6:	2502      	movs	r5, #2

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80017e8:	9000      	str	r0, [sp, #0]
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80017ea:	a901      	add	r1, sp, #4

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <BSP_LED_Init+0x48>)

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80017f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 80017f8:	9501      	str	r5, [sp, #4]

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	9b00      	ldr	r3, [sp, #0]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001806:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	9304      	str	r3, [sp, #16]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800180c:	f7ff fa84 	bl	8000d18 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001810:	4622      	mov	r2, r4
 8001812:	4629      	mov	r1, r5
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <BSP_LED_Init+0x48>)
 8001816:	f7ff fb6f 	bl	8000ef8 <HAL_GPIO_WritePin>
  }
}
 800181a:	b007      	add	sp, #28
 800181c:	bd30      	pop	{r4, r5, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40022000 	.word	0x40022000

08001828 <BSP_LED_Toggle>:
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8001828:	b918      	cbnz	r0, 8001832 <BSP_LED_Toggle+0xa>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800182a:	2102      	movs	r1, #2
 800182c:	4801      	ldr	r0, [pc, #4]	; (8001834 <BSP_LED_Toggle+0xc>)
 800182e:	f7ff bb67 	b.w	8000f00 <HAL_GPIO_TogglePin>
 8001832:	4770      	bx	lr
 8001834:	40022000 	.word	0x40022000

08001838 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001838:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp4 = 0;
  
  tmp = Width << 16;
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
 800183a:	9d04      	ldr	r5, [sp, #16]
 800183c:	6804      	ldr	r4, [r0, #0]
 800183e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001842:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001844:	6843      	ldr	r3, [r0, #4]
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 8001846:	63e2      	str	r2, [r4, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800184c:	d132      	bne.n	80018b4 <DMA2D_SetConfig+0x7c>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 800184e:	6882      	ldr	r2, [r0, #8]
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001850:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001854:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001858:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800185c:	b2c9      	uxtb	r1, r1
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 800185e:	b90a      	cbnz	r2, 8001864 <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001860:	4333      	orrs	r3, r6
 8001862:	e001      	b.n	8001868 <DMA2D_SetConfig+0x30>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB888)
 8001864:	2a01      	cmp	r2, #1
 8001866:	d102      	bne.n	800186e <DMA2D_SetConfig+0x36>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8001868:	432b      	orrs	r3, r5
 800186a:	4319      	orrs	r1, r3
 800186c:	e020      	b.n	80018b0 <DMA2D_SetConfig+0x78>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 800186e:	2a02      	cmp	r2, #2
 8001870:	d107      	bne.n	8001882 <DMA2D_SetConfig+0x4a>
    {
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 10);
      tmp4 = (tmp4 >> 3 );
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001872:	0cd8      	lsrs	r0, r3, #19
 8001874:	0aaa      	lsrs	r2, r5, #10
 8001876:	02c0      	lsls	r0, r0, #11
 8001878:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 800187c:	ea42 01d1 	orr.w	r1, r2, r1, lsr #3
 8001880:	e016      	b.n	80018b0 <DMA2D_SetConfig+0x78>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 8001882:	2a03      	cmp	r2, #3
 8001884:	d10a      	bne.n	800189c <DMA2D_SetConfig+0x64>
    { 
      tmp1 = (tmp1 >> 31);
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 11);
      tmp4 = (tmp4 >> 3 );      
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001886:	0cd8      	lsrs	r0, r3, #19
 8001888:	0aea      	lsrs	r2, r5, #11
 800188a:	0280      	lsls	r0, r0, #10
 800188c:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8001890:	ea42 01d1 	orr.w	r1, r2, r1, lsr #3
 8001894:	0ff2      	lsrs	r2, r6, #31
 8001896:	ea41 31c2 	orr.w	r1, r1, r2, lsl #15
 800189a:	e009      	b.n	80018b0 <DMA2D_SetConfig+0x78>
    {
      tmp1 = (tmp1 >> 28);
      tmp2 = (tmp2 >> 20);
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800189c:	0d18      	lsrs	r0, r3, #20
 800189e:	0b2a      	lsrs	r2, r5, #12
 80018a0:	0200      	lsls	r0, r0, #8
 80018a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80018a6:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
 80018aa:	0f32      	lsrs	r2, r6, #28
 80018ac:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
    }    
    /* Write to DMA2D OCOLR register */
    hdma2d->Instance->OCOLR = tmp;
 80018b0:	63a1      	str	r1, [r4, #56]	; 0x38
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    hdma2d->Instance->FGMAR = pdata;
 80018b4:	60e1      	str	r1, [r4, #12]
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <HAL_DMA2D_MspInit>:
 80018b8:	4770      	bx	lr

080018ba <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 80018ba:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80018bc:	4604      	mov	r4, r0
 80018be:	b330      	cbz	r0, 800190e <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018c0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018c8:	b91b      	cbnz	r3, 80018d2 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018ca:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ce:	f7ff fff3 	bl	80018b8 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80018d2:	2302      	movs	r3, #2

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018d4:	2000      	movs	r0, #0
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80018d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

/* DMA2D CR register configuration -------------------------------------------*/
  /* Get the CR register value */
  tmp = hdma2d->Instance->CR;
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]

  /* Clear Mode bits */
  tmp &= (uint32_t)~DMA2D_CR_MODE;
 80018de:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000

  /* Prepare the value to be wrote to the CR register */
  tmp |= hdma2d->Init.Mode;
 80018e2:	6862      	ldr	r2, [r4, #4]
 80018e4:	430a      	orrs	r2, r1

  /* Write to DMA2D CR register */
  hdma2d->Instance->CR = tmp;
 80018e6:	601a      	str	r2, [r3, #0]

/* DMA2D OPFCCR register configuration ---------------------------------------*/
  /* Get the OPFCCR register value */
  tmp = hdma2d->Instance->OPFCCR;
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /* Clear Color Mode bits */
  tmp &= (uint32_t)~DMA2D_OPFCCR_CM;
 80018ea:	f022 0107 	bic.w	r1, r2, #7

  /* Prepare the value to be wrote to the OPFCCR register */
  tmp |= hdma2d->Init.ColorMode;
 80018ee:	68a2      	ldr	r2, [r4, #8]
 80018f0:	430a      	orrs	r2, r1

  /* Clear Offset bits */
  tmp &= (uint32_t)~DMA2D_OOR_LO;

  /* Prepare the value to be wrote to the OOR register */
  tmp |= hdma2d->Init.OutputOffset;
 80018f2:	68e1      	ldr	r1, [r4, #12]

  /* Prepare the value to be wrote to the OPFCCR register */
  tmp |= hdma2d->Init.ColorMode;

  /* Write to DMA2D OPFCCR register */
  hdma2d->Instance->OPFCCR = tmp;
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34

/* DMA2D OOR register configuration ------------------------------------------*/  
  /* Get the OOR register value */
  tmp = hdma2d->Instance->OOR;
 80018f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Clear Offset bits */
  tmp &= (uint32_t)~DMA2D_OOR_LO;
 80018f8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80018fc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f

  /* Prepare the value to be wrote to the OOR register */
  tmp |= hdma2d->Init.OutputOffset;
 8001900:	430a      	orrs	r2, r1

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001904:	2301      	movs	r3, #1

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001906:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001908:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 800190c:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 800190e:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 8001910:	bd10      	pop	{r4, pc}

08001912 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:      The height of data to be transferred from source to destination.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001912:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001914:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:      The height of data to be transferred from source to destination.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001918:	4605      	mov	r5, r0
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800191a:	2c01      	cmp	r4, #1
 800191c:	f04f 0402 	mov.w	r4, #2
 8001920:	d014      	beq.n	800194c <HAL_DMA2D_Start+0x3a>
 8001922:	2601      	movs	r6, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001924:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001928:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Disable the Peripheral */
  __HAL_DMA2D_DISABLE(hdma2d);
 800192c:	6806      	ldr	r6, [r0, #0]
 800192e:	6834      	ldr	r4, [r6, #0]
 8001930:	f024 0401 	bic.w	r4, r4, #1
 8001934:	6034      	str	r4, [r6, #0]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001936:	9c06      	ldr	r4, [sp, #24]
 8001938:	9400      	str	r4, [sp, #0]
 800193a:	f7ff ff7d 	bl	8001838 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800193e:	682a      	ldr	r2, [r5, #0]

  return HAL_OK;
 8001940:	2000      	movs	r0, #0

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800194a:	e000      	b.n	800194e <HAL_DMA2D_Start+0x3c>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800194c:	4620      	mov	r0, r4

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 800194e:	b002      	add	sp, #8
 8001950:	bd70      	pop	{r4, r5, r6, pc}

08001952 <HAL_DMA2D_PollForTransfer>:
{
  uint32_t tmp, tmp1;
  uint32_t tickstart = 0;

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 8001952:	6803      	ldr	r3, [r0, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	07db      	lsls	r3, r3, #31
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	4604      	mov	r4, r0
 800195c:	460d      	mov	r5, r1
  uint32_t tmp, tmp1;
  uint32_t tickstart = 0;

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 800195e:	d404      	bmi.n	800196a <HAL_DMA2D_PollForTransfer+0x18>
        }
      }        
    }
  }
  /* Polling for CLUT loading */
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	069e      	lsls	r6, r3, #26
 8001966:	d52c      	bpl.n	80019c2 <HAL_DMA2D_PollForTransfer+0x70>
 8001968:	e037      	b.n	80019da <HAL_DMA2D_PollForTransfer+0x88>

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800196a:	f7ff f9c1 	bl	8000cf0 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	0792      	lsls	r2, r2, #30
 8001976:	d4f3      	bmi.n	8001960 <HAL_DMA2D_PollForTransfer+0xe>
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001978:	6859      	ldr	r1, [r3, #4]
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 800197a:	685a      	ldr	r2, [r3, #4]

      if((tmp != RESET) || (tmp1 != RESET))
 800197c:	0688      	lsls	r0, r1, #26
   tickstart = HAL_GetTick();

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 800197e:	f002 0201 	and.w	r2, r2, #1

      if((tmp != RESET) || (tmp1 != RESET))
 8001982:	d50a      	bpl.n	800199a <HAL_DMA2D_PollForTransfer+0x48>
      {
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001984:	2220      	movs	r2, #32
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001986:	2001      	movs	r0, #1
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);

      if((tmp != RESET) || (tmp1 != RESET))
      {
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001988:	609a      	str	r2, [r3, #8]
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800198a:	6098      	str	r0, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800198c:	2304      	movs	r3, #4
 800198e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001992:	2300      	movs	r3, #0
 8001994:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        
        return HAL_ERROR;
 8001998:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);

      if((tmp != RESET) || (tmp1 != RESET))
 800199a:	2a00      	cmp	r2, #0
 800199c:	d1f2      	bne.n	8001984 <HAL_DMA2D_PollForTransfer+0x32>
        __HAL_UNLOCK(hdma2d);
        
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800199e:	1c69      	adds	r1, r5, #1
 80019a0:	d0e7      	beq.n	8001972 <HAL_DMA2D_PollForTransfer+0x20>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019a2:	b91d      	cbnz	r5, 80019ac <HAL_DMA2D_PollForTransfer+0x5a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80019a4:	2300      	movs	r3, #0
 80019a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80019aa:	e01b      	b.n	80019e4 <HAL_DMA2D_PollForTransfer+0x92>
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019ac:	f7ff f9a0 	bl	8000cf0 <HAL_GetTick>
 80019b0:	1b80      	subs	r0, r0, r6
 80019b2:	4285      	cmp	r5, r0
 80019b4:	d2dc      	bcs.n	8001970 <HAL_DMA2D_PollForTransfer+0x1e>
 80019b6:	e7f5      	b.n	80019a4 <HAL_DMA2D_PollForTransfer+0x52>
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
        
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80019b8:	1c69      	adds	r1, r5, #1
 80019ba:	d112      	bne.n	80019e2 <HAL_DMA2D_PollForTransfer+0x90>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	06d2      	lsls	r2, r2, #27
 80019c0:	d51f      	bpl.n	8001a02 <HAL_DMA2D_PollForTransfer+0xb0>
        }
      }      
    }
  }
  /* Clear the transfer complete flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	2202      	movs	r2, #2
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80019c6:	2000      	movs	r0, #0
        }
      }      
    }
  }
  /* Clear the transfer complete flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019c8:	609a      	str	r2, [r3, #8]
  
  /* Clear the CLUT loading flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
 80019ca:	2210      	movs	r2, #16
 80019cc:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019ce:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80019d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  /* Clear the CLUT loading flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Polling for CLUT loading */
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80019da:	f7ff f989 	bl	8000cf0 <HAL_GetTick>
 80019de:	4606      	mov	r6, r0
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80019e0:	e00d      	b.n	80019fe <HAL_DMA2D_PollForTransfer+0xac>
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019e2:	b93d      	cbnz	r5, 80019f4 <HAL_DMA2D_PollForTransfer+0xa2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80019e6:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80019ee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          
          return HAL_TIMEOUT;
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019f4:	f7ff f97c 	bl	8000cf0 <HAL_GetTick>
 80019f8:	1b80      	subs	r0, r0, r6
 80019fa:	4285      	cmp	r5, r0
 80019fc:	d3f2      	bcc.n	80019e4 <HAL_DMA2D_PollForTransfer+0x92>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	e7dc      	b.n	80019bc <HAL_DMA2D_PollForTransfer+0x6a>
    {
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	0710      	lsls	r0, r2, #28
 8001a06:	d5d7      	bpl.n	80019b8 <HAL_DMA2D_PollForTransfer+0x66>
      {      
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a08:	2208      	movs	r2, #8
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
        
        return HAL_ERROR;      
 8001a0a:	2001      	movs	r0, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
    {
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
      {      
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a0c:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        
        return HAL_ERROR;      
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a18 <HAL_DMA2D_ConfigLayer>:
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8001a22:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a24:	d05a      	beq.n	8001adc <HAL_DMA2D_ConfigLayer+0xc4>
 8001a26:	2201      	movs	r2, #1
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 8001a28:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8001a2c:	6803      	ldr	r3, [r0, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a2e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001a32:	bb11      	cbnz	r1, 8001a7a <HAL_DMA2D_ConfigLayer+0x62>
  {
    /* DMA2D BGPFCR register configuration -----------------------------------*/
    /* Get the BGPFCCR register value */
    tmp = hdma2d->Instance->BGPFCCR;
 8001a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
 8001a36:	492a      	ldr	r1, [pc, #168]	; (8001ae0 <HAL_DMA2D_ConfigLayer+0xc8>)
 8001a38:	6a06      	ldr	r6, [r0, #32]
 8001a3a:	4011      	ands	r1, r2
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a3c:	69c2      	ldr	r2, [r0, #28]
 8001a3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001a40:	f1a2 0509 	sub.w	r5, r2, #9
 8001a44:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8001a48:	2d01      	cmp	r5, #1
 8001a4a:	ea42 0201 	orr.w	r2, r2, r1
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8001a4e:	bf96      	itet	ls
 8001a50:	f004 417f 	andls.w	r1, r4, #4278190080	; 0xff000000
    }
    else
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 8001a54:	ea42 6204 	orrhi.w	r2, r2, r4, lsl #24
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8001a58:	430a      	orrls	r2, r1
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
    
    /* Prepare the value to be wrote to the BGOR register */
    tmp |= pLayerCfg->InputOffset;
 8001a5a:	6981      	ldr	r1, [r0, #24]
    
    /* Write to DMA2D BGOR register */
    hdma2d->Instance->BGOR = tmp;
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a5c:	2d01      	cmp	r5, #1
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
    }
    
    /* Write to DMA2D BGPFCCR register */
    hdma2d->Instance->BGPFCCR = tmp; 
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* DMA2D BGOR register configuration -------------------------------------*/  
    /* Get the BGOR register value */
    tmp = hdma2d->Instance->BGOR;
 8001a60:	699a      	ldr	r2, [r3, #24]
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
 8001a62:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001a66:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    
    /* Prepare the value to be wrote to the BGOR register */
    tmp |= pLayerCfg->InputOffset;
 8001a6a:	ea42 0201 	orr.w	r2, r2, r1
    
    /* Write to DMA2D BGOR register */
    hdma2d->Instance->BGOR = tmp;
 8001a6e:	619a      	str	r2, [r3, #24]
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a70:	d82e      	bhi.n	8001ad0 <HAL_DMA2D_ConfigLayer+0xb8>
    {
      /* Prepare the value to be wrote to the BGCOLR register */
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 8001a72:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    
      /* Write to DMA2D BGCOLR register */
      hdma2d->Instance->BGCOLR = tmp;
 8001a76:	629c      	str	r4, [r3, #40]	; 0x28
 8001a78:	e02a      	b.n	8001ad0 <HAL_DMA2D_ConfigLayer+0xb8>
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a7a:	010d      	lsls	r5, r1, #4
  /* Configure the foreground DMA2D layer */
  else
  {
    /* DMA2D FGPFCR register configuration -----------------------------------*/
    /* Get the FGPFCCR register value */
    tmp = hdma2d->Instance->FGPFCCR;
 8001a7c:	69da      	ldr	r2, [r3, #28]
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 8001a7e:	4c18      	ldr	r4, [pc, #96]	; (8001ae0 <HAL_DMA2D_ConfigLayer+0xc8>)
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a80:	eb00 0e05 	add.w	lr, r0, r5
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 8001a84:	4405      	add	r5, r0
    /* DMA2D FGPFCR register configuration -----------------------------------*/
    /* Get the FGPFCCR register value */
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 8001a86:	4014      	ands	r4, r2
 8001a88:	f8de 7020 	ldr.w	r7, [lr, #32]
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a8c:	f8de 201c 	ldr.w	r2, [lr, #28]
 8001a90:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8001a94:	f1a2 0609 	sub.w	r6, r2, #9
 8001a98:	4322      	orrs	r2, r4
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8001a9a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001a9e:	2e01      	cmp	r6, #1
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8001aa0:	bf96      	itet	ls
 8001aa2:	f004 447f 	andls.w	r4, r4, #4278190080	; 0xff000000
    }
    else
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 8001aa6:	ea42 6204 	orrhi.w	r2, r2, r4, lsl #24
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8001aaa:	4322      	orrls	r2, r4
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 8001aac:	69ac      	ldr	r4, [r5, #24]
    
    /* Write to DMA2D FGOR register */
    hdma2d->Instance->FGOR = tmp;
   
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001aae:	2e01      	cmp	r6, #1
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
    }
    
    /* Write to DMA2D FGPFCCR register */
    hdma2d->Instance->FGPFCCR = tmp; 
 8001ab0:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/  
    /* Get the FGOR register value */
    tmp = hdma2d->Instance->FGOR;
 8001ab2:	691a      	ldr	r2, [r3, #16]
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
 8001ab4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001ab8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 8001abc:	ea42 0204 	orr.w	r2, r2, r4
    
    /* Write to DMA2D FGOR register */
    hdma2d->Instance->FGOR = tmp;
 8001ac0:	611a      	str	r2, [r3, #16]
   
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8001ac2:	d805      	bhi.n	8001ad0 <HAL_DMA2D_ConfigLayer+0xb8>
    {
      /* Prepare the value to be wrote to the FGCOLR register */
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 8001ac4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001ac8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001aca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    
      /* Write to DMA2D FGCOLR register */
      hdma2d->Instance->FGCOLR = tmp;
 8001ace:	621a      	str	r2, [r3, #32]
    }   
  }    
  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001adc:	4618      	mov	r0, r3
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
  
  return HAL_OK;
}
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	00fcfff0 	.word	0x00fcfff0

08001ae4 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001ae8:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001aea:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001aec:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001aee:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001af2:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001af6:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001af8:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001afc:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b00:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b04:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b06:	19ee      	adds	r6, r5, r7
 8001b08:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b0c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001b10:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b12:	68e0      	ldr	r0, [r4, #12]
 8001b14:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8001b18:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001b1a:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b1c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001b20:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001b22:	68e0      	ldr	r0, [r4, #12]
 8001b24:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001b28:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001b2a:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b2c:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001b2e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001b32:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b34:	1c68      	adds	r0, r5, #1
 8001b36:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001b38:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b3a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001b3e:	4420      	add	r0, r4
 8001b40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001b44:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b46:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001b48:	6918      	ldr	r0, [r3, #16]
 8001b4a:	f020 0007 	bic.w	r0, r0, #7
 8001b4e:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001b50:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001b52:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8001b54:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8001b58:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001b5c:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001b60:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8001b64:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 8001b68:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8001b6c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8001b70:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001b72:	6958      	ldr	r0, [r3, #20]
 8001b74:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001b78:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001b7a:	6948      	ldr	r0, [r1, #20]
 8001b7c:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001b7e:	69d8      	ldr	r0, [r3, #28]
 8001b80:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001b84:	f020 0007 	bic.w	r0, r0, #7
 8001b88:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001b8a:	69cd      	ldr	r5, [r1, #28]
 8001b8c:	6a0c      	ldr	r4, [r1, #32]
 8001b8e:	432c      	orrs	r4, r5
 8001b90:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001b92:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001b94:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001b96:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001b9a:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001b9c:	b14e      	cbz	r6, 8001bb2 <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001b9e:	2e01      	cmp	r6, #1
 8001ba0:	d009      	beq.n	8001bb6 <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ba2:	1eb0      	subs	r0, r6, #2
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d908      	bls.n	8001bba <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ba8:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8001baa:	bf0c      	ite	eq
 8001bac:	2002      	moveq	r0, #2
 8001bae:	2001      	movne	r0, #1
 8001bb0:	e004      	b.n	8001bbc <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 8001bb2:	2004      	movs	r0, #4
 8001bb4:	e002      	b.n	8001bbc <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	e000      	b.n	8001bbc <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8001bba:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001bbc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001bbe:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001bc2:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8001bc6:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001bc8:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001bca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001bcc:	4344      	muls	r4, r0
 8001bce:	4378      	muls	r0, r7
 8001bd0:	3003      	adds	r0, #3
 8001bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001bd6:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bda:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001bde:	f020 0007 	bic.w	r0, r0, #7
 8001be2:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001be4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001be6:	f852 300e 	ldr.w	r3, [r2, lr]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f842 300e 	str.w	r3, [r2, lr]
 8001bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001bf6 <HAL_LTDC_MspInit>:
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001bf8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d06a      	beq.n	8001cd6 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001c00:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001c04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c08:	b91b      	cbnz	r3, 8001c12 <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001c0a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001c0e:	f7ff fff2 	bl	8001bf6 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001c20:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001c22:	6862      	ldr	r2, [r4, #4]
 8001c24:	6999      	ldr	r1, [r3, #24]
 8001c26:	4311      	orrs	r1, r2
 8001c28:	68a2      	ldr	r2, [r4, #8]
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	68e2      	ldr	r2, [r4, #12]
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	6922      	ldr	r2, [r4, #16]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001c36:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_LTDC_Init+0xe4>)
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001c3c:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001c3e:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001c40:	69a2      	ldr	r2, [r4, #24]
 8001c42:	6898      	ldr	r0, [r3, #8]
 8001c44:	4302      	orrs	r2, r0
 8001c46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_LTDC_Init+0xe4>)
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001c52:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001c54:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001c56:	6a22      	ldr	r2, [r4, #32]
 8001c58:	68d8      	ldr	r0, [r3, #12]
 8001c5a:	4302      	orrs	r2, r0
 8001c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c60:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <HAL_LTDC_Init+0xe4>)
 8001c64:	6919      	ldr	r1, [r3, #16]
 8001c66:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001c68:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001c6a:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001c6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c6e:	6918      	ldr	r0, [r3, #16]
 8001c70:	4302      	orrs	r2, r0
 8001c72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c76:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_LTDC_Init+0xe4>)
 8001c7a:	6959      	ldr	r1, [r3, #20]
 8001c7c:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001c7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001c80:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001c82:	6958      	ldr	r0, [r3, #20]
 8001c84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c86:	4302      	orrs	r2, r0
 8001c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8001c90:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001c94:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8001c98:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001c9c:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001c9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca0:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8001ca4:	4329      	orrs	r1, r5
 8001ca6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8001caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001cae:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8001cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb4:	f042 0204 	orr.w	r2, r2, #4
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8001cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbc:	f042 0202 	orr.w	r2, r2, #2
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001cca:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001ccc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001cd0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}
 8001cda:	bf00      	nop
 8001cdc:	f000f800 	.word	0xf000f800

08001ce0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001ce2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8001ce6:	4606      	mov	r6, r0
 8001ce8:	468e      	mov	lr, r1
 8001cea:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	f04f 0002 	mov.w	r0, #2
 8001cf2:	d01d      	beq.n	8001d30 <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001cf4:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001cf6:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001cf8:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cfa:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001cfe:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d02:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d06:	3438      	adds	r4, #56	; 0x38
 8001d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d16:	4630      	mov	r0, r6
 8001d18:	4662      	mov	r2, ip
 8001d1a:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d1c:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d1e:	f7ff fee1 	bl	8001ae4 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d22:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d24:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d26:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001d28:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d2c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d32 <HAL_LTDC_GetState>:
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
  return hltdc->State;
 8001d32:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8001d36:	4770      	bx	lr

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d38:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d3e:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d42:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d46:	4ab5      	ldr	r2, [pc, #724]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d48:	6891      	ldr	r1, [r2, #8]
 8001d4a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001d4e:	6091      	str	r1, [r2, #8]
 8001d50:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001d52:	6891      	ldr	r1, [r2, #8]
 8001d54:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 8001d56:	fab6 f686 	clz	r6, r6
 8001d5a:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d5c:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d5e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001d62:	d012      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d64:	49ad      	ldr	r1, [pc, #692]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d66:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001d68:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d6c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d70:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001d74:	bf08      	it	eq
 8001d76:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d78:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8001d7c:	bf16      	itet	ne
 8001d7e:	fab5 f585 	clzne	r5, r5
 8001d82:	2500      	moveq	r5, #0
 8001d84:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d86:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d8a:	02d8      	lsls	r0, r3, #11
 8001d8c:	d511      	bpl.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d8e:	48a3      	ldr	r0, [pc, #652]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d92:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d96:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d9a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d9e:	ea42 0201 	orr.w	r2, r2, r1
 8001da2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001da6:	d003      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001da8:	2900      	cmp	r1, #0
 8001daa:	bf08      	it	eq
 8001dac:	2501      	moveq	r5, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8001db0:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001db2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001db6:	bf18      	it	ne
 8001db8:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dba:	0699      	lsls	r1, r3, #26
 8001dbc:	d55b      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dc0:	4f97      	ldr	r7, [pc, #604]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	4b95      	ldr	r3, [pc, #596]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	603b      	str	r3, [r7, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe ff86 	bl	8000cf0 <HAL_GetTick>
 8001de4:	4680      	mov	r8, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	05da      	lsls	r2, r3, #23
 8001dea:	d407      	bmi.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe ff80 	bl	8000cf0 <HAL_GetTick>
 8001df0:	ebc8 0000 	rsb	r0, r8, r0
 8001df4:	2864      	cmp	r0, #100	; 0x64
 8001df6:	d9f6      	bls.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      {
        return HAL_TIMEOUT;
 8001df8:	2003      	movs	r0, #3
 8001dfa:	e33c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001dfc:	4f87      	ldr	r7, [pc, #540]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e02:	4053      	eors	r3, r2
 8001e04:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e08:	d035      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e0e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	673b      	str	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	673b      	str	r3, [r7, #112]	; 0x70
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8001e20:	0793      	lsls	r3, r2, #30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e22:	6739      	str	r1, [r7, #112]	; 0x70
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8001e24:	d40f      	bmi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 8001e26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e28:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e30:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e32:	d117      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001e34:	6899      	ldr	r1, [r3, #8]
 8001e36:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001e3a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001e3e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001e42:	4301      	orrs	r1, r0
 8001e44:	e011      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x132>
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7fe ff53 	bl	8000cf0 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f241 3988 	movw	r9, #5000	; 0x1388
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e52:	0798      	lsls	r0, r3, #30
 8001e54:	d4e7      	bmi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe ff4b 	bl	8000cf0 <HAL_GetTick>
 8001e5a:	ebc8 0000 	rsb	r0, r8, r0
 8001e5e:	4548      	cmp	r0, r9
 8001e60:	d9f6      	bls.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8001e62:	e7c9      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e6a:	6099      	str	r1, [r3, #8]
 8001e6c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001e72:	430a      	orrs	r2, r1
 8001e74:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	06d9      	lsls	r1, r3, #27
 8001e7a:	d50c      	bpl.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e7c:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e7e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e82:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001e86:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001e8a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001e8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e90:	4301      	orrs	r1, r0
 8001e92:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e96:	045a      	lsls	r2, r3, #17
 8001e98:	d508      	bpl.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e9a:	4860      	ldr	r0, [pc, #384]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e9c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ea0:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001ea4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eac:	041f      	lsls	r7, r3, #16
 8001eae:	d508      	bpl.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eb0:	485a      	ldr	r0, [pc, #360]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eb2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001eb6:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001eba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ec2:	03d8      	lsls	r0, r3, #15
 8001ec4:	d508      	bpl.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec6:	4855      	ldr	r0, [pc, #340]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ec8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ecc:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001ed0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ed8:	0399      	lsls	r1, r3, #14
 8001eda:	d508      	bpl.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001edc:	484f      	ldr	r0, [pc, #316]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ede:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ee2:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8001ee6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eee:	065a      	lsls	r2, r3, #25
 8001ef0:	d508      	bpl.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef2:	484a      	ldr	r0, [pc, #296]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ef4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ef8:	f022 0103 	bic.w	r1, r2, #3
 8001efc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001efe:	430a      	orrs	r2, r1
 8001f00:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f04:	061f      	lsls	r7, r3, #24
 8001f06:	d508      	bpl.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f08:	4844      	ldr	r0, [pc, #272]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f0a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f0e:	f022 010c 	bic.w	r1, r2, #12
 8001f12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f14:	430a      	orrs	r2, r1
 8001f16:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f1a:	05d8      	lsls	r0, r3, #23
 8001f1c:	d508      	bpl.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f1e:	483f      	ldr	r0, [pc, #252]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f20:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f24:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8001f28:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f30:	0599      	lsls	r1, r3, #22
 8001f32:	d508      	bpl.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f36:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f3a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001f3e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f40:	430a      	orrs	r2, r1
 8001f42:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f46:	055a      	lsls	r2, r3, #21
 8001f48:	d508      	bpl.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f4a:	4834      	ldr	r0, [pc, #208]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f4c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f50:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001f54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f56:	430a      	orrs	r2, r1
 8001f58:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f5c:	051f      	lsls	r7, r3, #20
 8001f5e:	d508      	bpl.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f60:	482e      	ldr	r0, [pc, #184]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f62:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f66:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001f6a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f72:	04d8      	lsls	r0, r3, #19
 8001f74:	d508      	bpl.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f76:	4829      	ldr	r0, [pc, #164]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f78:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f7c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001f80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f82:	430a      	orrs	r2, r1
 8001f84:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f88:	0499      	lsls	r1, r3, #18
 8001f8a:	d508      	bpl.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f8c:	4823      	ldr	r0, [pc, #140]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f8e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001f92:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001f96:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f9e:	025a      	lsls	r2, r3, #9
 8001fa0:	d508      	bpl.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa2:	481e      	ldr	r0, [pc, #120]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fa4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001fa8:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8001fac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fb4:	029f      	lsls	r7, r3, #10
 8001fb6:	d50c      	bpl.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fb8:	4818      	ldr	r0, [pc, #96]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001fbc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001fc0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fc4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001fc8:	bf08      	it	eq
 8001fca:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001fd2:	f013 0f08 	tst.w	r3, #8
 8001fd6:	bf18      	it	ne
 8001fd8:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fda:	0358      	lsls	r0, r3, #13
 8001fdc:	d508      	bpl.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fde:	480f      	ldr	r0, [pc, #60]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fe0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001fe4:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8001fe8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001fea:	430a      	orrs	r2, r1
 8001fec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ff0:	0219      	lsls	r1, r3, #8
 8001ff2:	d509      	bpl.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ff4:	4809      	ldr	r0, [pc, #36]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ff6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001ffa:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001ffe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002002:	430a      	orrs	r2, r1
 8002004:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002008:	2e01      	cmp	r6, #1
 800200a:	d00b      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800200c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002010:	d008      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002012:	2d01      	cmp	r5, #1
 8002014:	f040 818c 	bne.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8002018:	e123      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8002024:	4ec8      	ldr	r6, [pc, #800]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8002026:	6833      	ldr	r3, [r6, #0]
 8002028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800202c:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202e:	f7fe fe5f 	bl	8000cf0 <HAL_GetTick>
 8002032:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002034:	6833      	ldr	r3, [r6, #0]
 8002036:	f8df e310 	ldr.w	lr, [pc, #784]	; 8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800203a:	011a      	lsls	r2, r3, #4
 800203c:	d505      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800203e:	f7fe fe57 	bl	8000cf0 <HAL_GetTick>
 8002042:	1bc0      	subs	r0, r0, r7
 8002044:	2864      	cmp	r0, #100	; 0x64
 8002046:	d9f5      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002048:	e6d6      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800204a:	6827      	ldr	r7, [r4, #0]
 800204c:	07fb      	lsls	r3, r7, #31
 800204e:	d53c      	bpl.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002052:	bbd3      	cbnz	r3, 80020ca <HAL_RCCEx_PeriphCLKConfig+0x392>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002054:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8002058:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 800205c:	fa98 f9a8 	rbit	r9, r8
 8002060:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8002064:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002068:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800206c:	fa96 fca6 	rbit	ip, r6
 8002070:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8002074:	fabc fc8c 	clz	ip, ip
 8002078:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800207c:	faba fa8a 	clz	sl, sl
 8002080:	fa98 f8a8 	rbit	r8, r8
 8002084:	fab8 f888 	clz	r8, r8
 8002088:	fa96 f6a6 	rbit	r6, r6
 800208c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002090:	fab6 f686 	clz	r6, r6
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	fab3 fb83 	clz	fp, r3
 800209c:	6861      	ldr	r1, [r4, #4]
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80020a4:	fa01 f10a 	lsl.w	r1, r1, sl
 80020a8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80020ac:	fa03 f30b 	lsl.w	r3, r3, fp
 80020b0:	fa20 f009 	lsr.w	r0, r0, r9
 80020b4:	fa22 f20c 	lsr.w	r2, r2, ip
 80020b8:	430b      	orrs	r3, r1
 80020ba:	fa00 f108 	lsl.w	r1, r0, r8
 80020be:	4319      	orrs	r1, r3
 80020c0:	fa02 f306 	lsl.w	r3, r2, r6
 80020c4:	430b      	orrs	r3, r1
 80020c6:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020ca:	033e      	lsls	r6, r7, #12
 80020cc:	d503      	bpl.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80020ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d4:	d005      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 80020d6:	02f8      	lsls	r0, r7, #11
 80020d8:	d549      	bpl.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x436>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80020da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e0:	d145      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x436>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80020e2:	f8df e264 	ldr.w	lr, [pc, #612]	; 8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80020e6:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80020ea:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80020ee:	fa98 f9a8 	rbit	r9, r8
 80020f2:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80020f6:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80020fa:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80020fe:	fa96 fca6 	rbit	ip, r6
 8002102:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8002106:	fabc fc8c 	clz	ip, ip
 800210a:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800210e:	fabb fb8b 	clz	fp, fp
 8002112:	fa98 f8a8 	rbit	r8, r8
 8002116:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800211a:	fab8 f888 	clz	r8, r8
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	fab3 fa83 	clz	sl, r3
 8002126:	fa96 f6a6 	rbit	r6, r6
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002130:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002134:	fab6 f686 	clz	r6, r6
 8002138:	fa03 f10b 	lsl.w	r1, r3, fp
 800213c:	68e3      	ldr	r3, [r4, #12]
 800213e:	fa20 f009 	lsr.w	r0, r0, r9
 8002142:	fa22 f20c 	lsr.w	r2, r2, ip
 8002146:	fa03 f30a 	lsl.w	r3, r3, sl
 800214a:	430b      	orrs	r3, r1
 800214c:	fa00 f108 	lsl.w	r1, r0, r8
 8002150:	4319      	orrs	r1, r3
 8002152:	fa02 f306 	lsl.w	r3, r2, r6
 8002156:	430b      	orrs	r3, r1
 8002158:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 800215c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8002160:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002162:	f023 031f 	bic.w	r3, r3, #31
 8002166:	3a01      	subs	r2, #1
 8002168:	4313      	orrs	r3, r2
 800216a:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800216e:	01f9      	lsls	r1, r7, #7
 8002170:	d53c      	bpl.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002172:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8002176:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 800217a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 800217e:	fa98 f9a8 	rbit	r9, r8
 8002182:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002186:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800218a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800218e:	fa96 fca6 	rbit	ip, r6
 8002192:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8002196:	fabc fc8c 	clz	ip, ip
 800219a:	fa9b fbab 	rbit	fp, fp
 800219e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021a2:	fabb fb8b 	clz	fp, fp
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	fab3 fa83 	clz	sl, r3
 80021ae:	fa98 f8a8 	rbit	r8, r8
 80021b2:	fab8 f888 	clz	r8, r8
 80021b6:	fa96 f6a6 	rbit	r6, r6
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80021c0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80021c4:	fab6 f686 	clz	r6, r6
 80021c8:	fa03 f10b 	lsl.w	r1, r3, fp
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	fa20 f009 	lsr.w	r0, r0, r9
 80021d2:	fa22 f20c 	lsr.w	r2, r2, ip
 80021d6:	fa03 f30a 	lsl.w	r3, r3, sl
 80021da:	430b      	orrs	r3, r1
 80021dc:	fa00 f108 	lsl.w	r1, r0, r8
 80021e0:	4319      	orrs	r1, r3
 80021e2:	fa02 f306 	lsl.w	r3, r2, r6
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021ec:	01ba      	lsls	r2, r7, #6
 80021ee:	d526      	bpl.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80021f0:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80021f4:	fa9e feae 	rbit	lr, lr
 80021f8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021fc:	fabe fe8e 	clz	lr, lr
 8002200:	fa90 f0a0 	rbit	r0, r0
 8002204:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002208:	fab0 f780 	clz	r7, r0
 800220c:	fa92 f2a2 	rbit	r2, r2
 8002210:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002214:	fab2 f682 	clz	r6, r2
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	fab3 f183 	clz	r1, r3
 8002220:	6920      	ldr	r0, [r4, #16]
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	68e2      	ldr	r2, [r4, #12]
 8002226:	40b8      	lsls	r0, r7
 8002228:	fa03 f30e 	lsl.w	r3, r3, lr
 800222c:	40b2      	lsls	r2, r6
 800222e:	4303      	orrs	r3, r0
 8002230:	431a      	orrs	r2, r3
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	408b      	lsls	r3, r1
 8002236:	4313      	orrs	r3, r2
 8002238:	4a43      	ldr	r2, [pc, #268]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800223a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800223e:	4e42      	ldr	r6, [pc, #264]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8002240:	6833      	ldr	r3, [r6, #0]
 8002242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002246:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7fe fd52 	bl	8000cf0 <HAL_GetTick>
 800224c:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	f53f aede 	bmi.w	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002256:	f7fe fd4b 	bl	8000cf0 <HAL_GetTick>
 800225a:	1bc0      	subs	r0, r0, r7
 800225c:	2864      	cmp	r0, #100	; 0x64
 800225e:	d9f6      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002260:	e5ca      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002262:	4d39      	ldr	r5, [pc, #228]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe fd40 	bl	8000cf0 <HAL_GetTick>
 8002270:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002272:	682b      	ldr	r3, [r5, #0]
 8002274:	009f      	lsls	r7, r3, #2
 8002276:	d45d      	bmi.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002278:	6825      	ldr	r5, [r4, #0]
 800227a:	032e      	lsls	r6, r5, #12
 800227c:	d460      	bmi.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800227e:	02e8      	lsls	r0, r5, #11
 8002280:	d464      	bmi.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002282:	02a9      	lsls	r1, r5, #10
 8002284:	f100 80ad 	bmi.w	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002288:	072a      	lsls	r2, r5, #28
 800228a:	d545      	bpl.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800228c:	4f2e      	ldr	r7, [pc, #184]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800228e:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8002292:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002296:	fa95 fca5 	rbit	ip, r5
 800229a:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 800229e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80022a2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022a6:	fa96 f8a6 	rbit	r8, r6
 80022aa:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80022ae:	fab8 f888 	clz	r8, r8
 80022b2:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022b6:	fab9 f989 	clz	r9, r9
 80022ba:	fa96 f6a6 	rbit	r6, r6
 80022be:	fab6 f686 	clz	r6, r6
 80022c2:	fa95 f5a5 	rbit	r5, r5
 80022c6:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80022ca:	fab5 f585 	clz	r5, r5
 80022ce:	fa9e feae 	rbit	lr, lr
 80022d2:	6963      	ldr	r3, [r4, #20]
 80022d4:	fabe fe8e 	clz	lr, lr
 80022d8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80022dc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80022e0:	fa03 f109 	lsl.w	r1, r3, r9
 80022e4:	69e3      	ldr	r3, [r4, #28]
 80022e6:	fa20 f008 	lsr.w	r0, r0, r8
 80022ea:	fa22 f20c 	lsr.w	r2, r2, ip
 80022ee:	fa03 fe0e 	lsl.w	lr, r3, lr
 80022f2:	fa02 f305 	lsl.w	r3, r2, r5
 80022f6:	ea41 0e0e 	orr.w	lr, r1, lr
 80022fa:	fa00 f106 	lsl.w	r1, r0, r6
 80022fe:	ea4e 0101 	orr.w	r1, lr, r1
 8002302:	430b      	orrs	r3, r1
 8002304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002318:	4c0b      	ldr	r4, [pc, #44]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7fe fce5 	bl	8000cf0 <HAL_GetTick>
 8002326:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f140 809c 	bpl.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x730>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002330:	2000      	movs	r0, #0
 8002332:	e0a0      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002334:	f7fe fcdc 	bl	8000cf0 <HAL_GetTick>
 8002338:	1b80      	subs	r0, r0, r6
 800233a:	2864      	cmp	r0, #100	; 0x64
 800233c:	d999      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 800233e:	e55b      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002342:	b133      	cbz	r3, 8002352 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8002344:	e79b      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x546>
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800234c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d197      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002352:	4f4a      	ldr	r7, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8002354:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8002358:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800235c:	fa9c f9ac 	rbit	r9, ip
 8002360:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002364:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002368:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800236c:	fa96 fea6 	rbit	lr, r6
 8002370:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8002374:	fabe fe8e 	clz	lr, lr
 8002378:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800237c:	faba fa8a 	clz	sl, sl
 8002380:	fa9c fcac 	rbit	ip, ip
 8002384:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8002388:	fabc fc8c 	clz	ip, ip
 800238c:	fa98 f8a8 	rbit	r8, r8
 8002390:	fab8 f888 	clz	r8, r8
 8002394:	fa96 f6a6 	rbit	r6, r6
 8002398:	69a1      	ldr	r1, [r4, #24]
 800239a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800239e:	6963      	ldr	r3, [r4, #20]
 80023a0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80023a4:	fa01 f808 	lsl.w	r8, r1, r8
 80023a8:	fa20 f009 	lsr.w	r0, r0, r9
 80023ac:	fa03 f30a 	lsl.w	r3, r3, sl
 80023b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80023b4:	fab6 f686 	clz	r6, r6
 80023b8:	fa00 f10c 	lsl.w	r1, r0, ip
 80023bc:	ea43 0308 	orr.w	r3, r3, r8
 80023c0:	4319      	orrs	r1, r3
 80023c2:	fa02 f306 	lsl.w	r3, r2, r6
 80023c6:	430b      	orrs	r3, r1
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023d2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80023d6:	3a01      	subs	r2, #1
 80023d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e0:	e74f      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80023e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e8:	f47f af4e 	bne.w	8002288 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80023ec:	4f23      	ldr	r7, [pc, #140]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80023ee:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80023f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80023f6:	fa9c f9ac 	rbit	r9, ip
 80023fa:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80023fe:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002402:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002406:	fa96 fea6 	rbit	lr, r6
 800240a:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 800240e:	fabe fe8e 	clz	lr, lr
 8002412:	fa9a faaa 	rbit	sl, sl
 8002416:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800241a:	faba fa8a 	clz	sl, sl
 800241e:	fa98 f8a8 	rbit	r8, r8
 8002422:	fab8 f888 	clz	r8, r8
 8002426:	fa9c fcac 	rbit	ip, ip
 800242a:	fabc fc8c 	clz	ip, ip
 800242e:	fa96 f6a6 	rbit	r6, r6
 8002432:	6a21      	ldr	r1, [r4, #32]
 8002434:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002438:	6963      	ldr	r3, [r4, #20]
 800243a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800243e:	fa01 f808 	lsl.w	r8, r1, r8
 8002442:	fa20 f009 	lsr.w	r0, r0, r9
 8002446:	fa03 f30a 	lsl.w	r3, r3, sl
 800244a:	fab6 f686 	clz	r6, r6
 800244e:	fa00 f10c 	lsl.w	r1, r0, ip
 8002452:	fa22 f20e 	lsr.w	r2, r2, lr
 8002456:	ea43 0308 	orr.w	r3, r3, r8
 800245a:	4319      	orrs	r1, r3
 800245c:	fa02 f306 	lsl.w	r3, r2, r6
 8002460:	430b      	orrs	r3, r1
 8002462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002466:	e70f      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x550>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002468:	f7fe fc42 	bl	8000cf0 <HAL_GetTick>
 800246c:	1b40      	subs	r0, r0, r5
 800246e:	2864      	cmp	r0, #100	; 0x64
 8002470:	f67f af5a 	bls.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002474:	e4c0      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002476:	b003      	add	sp, #12
 8002478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800247c:	40023800 	.word	0x40023800

08002480 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8002480:	6803      	ldr	r3, [r0, #0]
 8002482:	2118      	movs	r1, #24
 8002484:	b2da      	uxtb	r2, r3
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 800248c:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8002490:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002494:	4904      	ldr	r1, [pc, #16]	; (80024a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3)
 8002496:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002498:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 800249a:	bf88      	it	hi
 800249c:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249e:	6541      	str	r1, [r0, #84]	; 0x54
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
 80024a0:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 80024a2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	08004ee9 	.word	0x08004ee9

080024ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ae:	4604      	mov	r4, r0
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d031      	beq.n	8002518 <HAL_DMA_Init+0x6c>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b4:	6801      	ldr	r1, [r0, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b6:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b8:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_DMA_Init+0x70>)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ba:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024be:	680b      	ldr	r3, [r1, #0]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c0:	6840      	ldr	r0, [r0, #4]

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c2:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c4:	68a3      	ldr	r3, [r4, #8]
 80024c6:	4318      	orrs	r0, r3
 80024c8:	68e3      	ldr	r3, [r4, #12]
 80024ca:	4318      	orrs	r0, r3
 80024cc:	6923      	ldr	r3, [r4, #16]
 80024ce:	4318      	orrs	r0, r3
 80024d0:	6963      	ldr	r3, [r4, #20]
 80024d2:	4318      	orrs	r0, r3
 80024d4:	69a3      	ldr	r3, [r4, #24]
 80024d6:	4318      	orrs	r0, r3
 80024d8:	69e3      	ldr	r3, [r4, #28]
 80024da:	4318      	orrs	r0, r3
 80024dc:	6a23      	ldr	r3, [r4, #32]
 80024de:	4303      	orrs	r3, r0
 80024e0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024e4:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e6:	bf01      	itttt	eq
 80024e8:	6b20      	ldreq	r0, [r4, #48]	; 0x30
 80024ea:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80024ec:	4328      	orreq	r0, r5
 80024ee:	4303      	orreq	r3, r0

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f0:	2a04      	cmp	r2, #4
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024f2:	4620      	mov	r0, r4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f6:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f8:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024fc:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002500:	bf04      	itt	eq
 8002502:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 8002504:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002506:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002508:	f7ff ffba 	bl	8002480 <DMA_CalcBaseAndBitshift>
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250e:	2301      	movs	r3, #1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002512:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002516:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	f010803f 	.word	0xf010803f

08002520 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002520:	b538      	push	{r3, r4, r5, lr}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002522:	4605      	mov	r5, r0
 8002524:	b1e8      	cbz	r0, 8002562 <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002526:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800252a:	2b02      	cmp	r3, #2
 800252c:	d019      	beq.n	8002562 <HAL_DMA_DeInit+0x42>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800252e:	6803      	ldr	r3, [r0, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 8002530:	2400      	movs	r4, #0
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 800253a:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 800253c:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 800253e:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 8002540:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 8002542:	60dc      	str	r4, [r3, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 8002544:	611c      	str	r4, [r3, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8002546:	615a      	str	r2, [r3, #20]

  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002548:	f7ff ff9a 	bl	8002480 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;
 800254c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800254e:	233f      	movs	r3, #63	; 0x3f
 8002550:	4093      	lsls	r3, r2
 8002552:	6083      	str	r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8002554:	4620      	mov	r0, r4
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	64ec      	str	r4, [r5, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002558:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800255c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8002560:	bd38      	pop	{r3, r4, r5, pc}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002562:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8002564:	bd38      	pop	{r3, r4, r5, pc}

08002566 <HAL_SDRAM_MspInit>:
 8002566:	4770      	bx	lr

08002568 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800256c:	4604      	mov	r4, r0
 800256e:	b1c8      	cbz	r0, 80025a4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002570:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002578:	b91b      	cbnz	r3, 8002582 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800257a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800257e:	f7ff fff2 	bl	8002566 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002582:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002584:	1d21      	adds	r1, r4, #4
 8002586:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002588:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800258c:	f000 f835 	bl	80025fa <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002590:	6862      	ldr	r2, [r4, #4]
 8002592:	4629      	mov	r1, r5
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	f000 f873 	bl	8002680 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800259a:	2301      	movs	r3, #1
  
  return HAL_OK;
 800259c:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800259e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 80025a6:	bd38      	pop	{r3, r4, r5, pc}

080025a8 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80025ac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80025b0:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80025b2:	b2c0      	uxtb	r0, r0
 80025b4:	2802      	cmp	r0, #2
 80025b6:	d00d      	beq.n	80025d4 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025b8:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80025ba:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80025c0:	f000 f8a9 	bl	8002716 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80025c4:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80025c6:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80025c8:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80025ca:	bf0c      	ite	eq
 80025cc:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80025ce:	2301      	movne	r3, #1
 80025d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 80025d4:	bd38      	pop	{r3, r4, r5, pc}

080025d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80025d6:	b510      	push	{r4, lr}
 80025d8:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80025da:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80025de:	b2c0      	uxtb	r0, r0
 80025e0:	2802      	cmp	r0, #2
 80025e2:	d009      	beq.n	80025f8 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025e4:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80025e6:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80025ec:	f000 f8b9 	bl	8002762 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80025f0:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80025f2:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80025f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 80025f8:	bd10      	pop	{r4, pc}

080025fa <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80025fa:	680b      	ldr	r3, [r1, #0]
 80025fc:	6a0a      	ldr	r2, [r1, #32]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002606:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800260a:	68cf      	ldr	r7, [r1, #12]
 800260c:	690e      	ldr	r6, [r1, #16]
 800260e:	694d      	ldr	r5, [r1, #20]
 8002610:	698c      	ldr	r4, [r1, #24]
 8002612:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8002616:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800261a:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800261c:	d013      	beq.n	8002646 <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800261e:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002622:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002626:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800262a:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800262e:	433e      	orrs	r6, r7
 8002630:	4335      	orrs	r5, r6
 8002632:	432c      	orrs	r4, r5
 8002634:	ea44 010a 	orr.w	r1, r4, sl
 8002638:	430a      	orrs	r2, r1
 800263a:	ea42 0309 	orr.w	r3, r2, r9
 800263e:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002642:	6003      	str	r3, [r0, #0]
 8002644:	e019      	b.n	800267a <FMC_SDRAM_Init+0x80>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002646:	ea4e 0e03 	orr.w	lr, lr, r3
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800264a:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800264e:	ea4a 0202 	orr.w	r2, sl, r2
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002652:	ea4e 0707 	orr.w	r7, lr, r7
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002656:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800265a:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800265e:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002660:	433e      	orrs	r6, r7
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002662:	ea49 010c 	orr.w	r1, r9, ip
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002666:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800266a:	4335      	orrs	r5, r6
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800266c:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                       Init->MemoryDataWidth    |\
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002670:	6001      	str	r1, [r0, #0]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002672:	432c      	orrs	r4, r5
 8002674:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002678:	6044      	str	r4, [r0, #4]
  }  
  
  return HAL_OK;
}
 800267a:	2000      	movs	r0, #0
 800267c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002680 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002680:	2a01      	cmp	r2, #1
 8002682:	694b      	ldr	r3, [r1, #20]
 8002684:	68ca      	ldr	r2, [r1, #12]
 8002686:	f8d1 c018 	ldr.w	ip, [r1, #24]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800268a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800268e:	680e      	ldr	r6, [r1, #0]
 8002690:	684d      	ldr	r5, [r1, #4]
 8002692:	688c      	ldr	r4, [r1, #8]
 8002694:	f8d1 9010 	ldr.w	r9, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002698:	d01a      	beq.n	80026d0 <FMC_SDRAM_Timing_Init+0x50>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800269a:	6887      	ldr	r7, [r0, #8]
 800269c:	3e01      	subs	r6, #1
 800269e:	3d01      	subs	r5, #1
 80026a0:	3c01      	subs	r4, #1
 80026a2:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 80026a6:	3a01      	subs	r2, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	4337      	orrs	r7, r6
 80026ac:	ea47 1605 	orr.w	r6, r7, r5, lsl #4
 80026b0:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
 80026b4:	ea45 3402 	orr.w	r4, r5, r2, lsl #12
 80026b8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80026bc:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 80026c0:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026c4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80026c8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80026cc:	6083      	str	r3, [r0, #8]
 80026ce:	e01f      	b.n	8002710 <FMC_SDRAM_Timing_Init+0x90>
  }
  else /* FMC_Bank2_SDRAM */
  {  
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK2];
 80026d0:	68c1      	ldr	r1, [r0, #12]
 80026d2:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 80026d6:	1e6f      	subs	r7, r5, #1
 80026d8:	1e66      	subs	r6, r4, #1
 80026da:	f001 4870 	and.w	r8, r1, #4026531840	; 0xf0000000
 80026de:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80026e2:	3b01      	subs	r3, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	ea4e 0808 	orr.w	r8, lr, r8
 80026ea:	051b      	lsls	r3, r3, #20
 80026ec:	ea48 1e07 	orr.w	lr, r8, r7, lsl #4
 80026f0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80026f4:	ea4e 2706 	orr.w	r7, lr, r6, lsl #8
 80026f8:	ea47 4605 	orr.w	r6, r7, r5, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026fc:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8002700:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RCDDelay)-1) << 24));   
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK1];
 8002704:	6886      	ldr	r6, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002706:	f006 4670 	and.w	r6, r6, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
 800270a:	60c5      	str	r5, [r0, #12]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800270c:	4332      	orrs	r2, r6
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
 800270e:	6082      	str	r2, [r0, #8]
  }   
  
  return HAL_OK;
}
 8002710:	2000      	movs	r0, #0
 8002712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002716 <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 8002716:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002718:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800271a:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800271c:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800271e:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002720:	e891 0009 	ldmia.w	r1, {r0, r3}
 8002724:	4303      	orrs	r3, r0
 8002726:	68c8      	ldr	r0, [r1, #12]
 8002728:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 800272c:	688b      	ldr	r3, [r1, #8]
 800272e:	3b01      	subs	r3, #1
 8002730:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 8002734:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800273a:	f7fe fad9 	bl	8000cf0 <HAL_GetTick>
 800273e:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002740:	69a0      	ldr	r0, [r4, #24]
 8002742:	f010 0020 	ands.w	r0, r0, #32
 8002746:	d00a      	beq.n	800275e <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002748:	1c6b      	adds	r3, r5, #1
 800274a:	d0f9      	beq.n	8002740 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800274c:	b90d      	cbnz	r5, 8002752 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e005      	b.n	800275e <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002752:	f7fe facd 	bl	8000cf0 <HAL_GetTick>
 8002756:	1b80      	subs	r0, r0, r6
 8002758:	4285      	cmp	r5, r0
 800275a:	d2f1      	bcs.n	8002740 <FMC_SDRAM_SendCommand+0x2a>
 800275c:	e7f7      	b.n	800274e <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 800275e:	b002      	add	sp, #8
 8002760:	bd70      	pop	{r4, r5, r6, pc}

08002762 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8002762:	6943      	ldr	r3, [r0, #20]
 8002764:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002768:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800276a:	2000      	movs	r0, #0
 800276c:	4770      	bx	lr

0800276e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800276e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002770:	f000 fb54 	bl	8002e1c <vTaskStartScheduler>
  
  return osOK;
}
 8002774:	2000      	movs	r0, #0
 8002776:	bd08      	pop	{r3, pc}

08002778 <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002778:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800277c:	b10b      	cbz	r3, 8002782 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800277e:	f000 bb91 	b.w	8002ea4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8002782:	f000 bb89 	b.w	8002e98 <xTaskGetTickCount>

08002786 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002786:	b570      	push	{r4, r5, r6, lr}
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002788:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800278c:	b086      	sub	sp, #24
 800278e:	2500      	movs	r5, #0
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002790:	8a02      	ldrh	r2, [r0, #16]
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002792:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002794:	460b      	mov	r3, r1
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8002796:	bf14      	ite	ne
 8002798:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800279a:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800279c:	e890 0042 	ldmia.w	r0, {r1, r6}
 80027a0:	a805      	add	r0, sp, #20
 80027a2:	9503      	str	r5, [sp, #12]
 80027a4:	9502      	str	r5, [sp, #8]
 80027a6:	9001      	str	r0, [sp, #4]
 80027a8:	4630      	mov	r0, r6
 80027aa:	9400      	str	r4, [sp, #0]
 80027ac:	f000 fb14 	bl	8002dd8 <xTaskGenericCreate>
 80027b0:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 80027b2:	bf0c      	ite	eq
 80027b4:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 80027b6:	2000      	movne	r0, #0
  }
  
  return handle;
}
 80027b8:	b006      	add	sp, #24
 80027ba:	bd70      	pop	{r4, r5, r6, pc}

080027bc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80027bc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027be:	f000 fd69 	bl	8003294 <xTaskGetSchedulerState>
 80027c2:	2801      	cmp	r0, #1
 80027c4:	d003      	beq.n	80027ce <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80027c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80027ca:	f000 b903 	b.w	80029d4 <xPortSysTickHandler>
 80027ce:	bd08      	pop	{r3, pc}

080027d0 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80027d0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80027d2:	2900      	cmp	r1, #0
 80027d4:	bf08      	it	eq
 80027d6:	2101      	moveq	r1, #1
 80027d8:	f000 fc7e 	bl	80030d8 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80027dc:	2000      	movs	r0, #0
 80027de:	bd08      	pop	{r3, pc}

080027e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027e0:	b538      	push	{r3, r4, r5, lr}
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80027e2:	0743      	lsls	r3, r0, #29
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027e4:	4604      	mov	r4, r0
	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027e6:	bf1c      	itt	ne
 80027e8:	f020 0407 	bicne.w	r4, r0, #7
 80027ec:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 80027ee:	f000 fb4b 	bl	8002e88 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <pvPortMalloc+0x44>)
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	b91b      	cbnz	r3, 8002800 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <pvPortMalloc+0x48>)
 80027fa:	f023 0307 	bic.w	r3, r3, #7
 80027fe:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002800:	490a      	ldr	r1, [pc, #40]	; (800282c <pvPortMalloc+0x4c>)
 8002802:	680b      	ldr	r3, [r1, #0]
 8002804:	441c      	add	r4, r3
 8002806:	f5b4 6fff 	cmp.w	r4, #2040	; 0x7f8
 800280a:	d205      	bcs.n	8002818 <pvPortMalloc+0x38>
 800280c:	42a3      	cmp	r3, r4
 800280e:	d203      	bcs.n	8002818 <pvPortMalloc+0x38>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002810:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
 8002812:	600c      	str	r4, [r1, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002814:	441d      	add	r5, r3
 8002816:	e000      	b.n	800281a <pvPortMalloc+0x3a>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 8002818:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800281a:	f000 fbe5 	bl	8002fe8 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 800281e:	4628      	mov	r0, r5
 8002820:	bd38      	pop	{r3, r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	200006a4 	.word	0x200006a4
 8002828:	200006b0 	.word	0x200006b0
 800282c:	200006a0 	.word	0x200006a0

08002830 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002830:	b150      	cbz	r0, 8002848 <vPortFree+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	b672      	cpsid	i
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	b662      	cpsie	i
 8002846:	e7fe      	b.n	8002846 <vPortFree+0x16>
 8002848:	4770      	bx	lr
	...

0800284c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <prvTaskExitError+0x34>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	d00a      	beq.n	800286a <prvTaskExitError+0x1e>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	b672      	cpsid	i
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	b662      	cpsie	i
 8002868:	e7fe      	b.n	8002868 <prvTaskExitError+0x1c>
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	b672      	cpsid	i
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	b662      	cpsie	i
 800287e:	e7fe      	b.n	800287e <prvTaskExitError+0x32>
 8002880:	20000010 	.word	0x20000010

08002884 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <prvPortStartFirstTask+0x1c>)
 8002886:	6800      	ldr	r0, [r0, #0]
 8002888:	6800      	ldr	r0, [r0, #0]
 800288a:	f380 8808 	msr	MSP, r0
 800288e:	b662      	cpsie	i
 8002890:	b661      	cpsie	f
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	df00      	svc	0
 800289c:	bf00      	nop
 800289e:	0000      	.short	0x0000
 80028a0:	e000ed08 	.word	0xe000ed08

080028a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80028a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80028b4 <vPortEnableVFP+0x10>
 80028a8:	6801      	ldr	r1, [r0, #0]
 80028aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028ae:	6001      	str	r1, [r0, #0]
 80028b0:	4770      	bx	lr
 80028b2:	0000      	.short	0x0000
 80028b4:	e000ed88 	.word	0xe000ed88

080028b8 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028bc:	f840 2c20 	str.w	r2, [r0, #-32]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80028c0:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <pxPortInitialiseStack+0x1c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80028c6:	3844      	subs	r0, #68	; 0x44

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028c8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80028ca:	f06f 0302 	mvn.w	r3, #2
 80028ce:	6203      	str	r3, [r0, #32]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	0800284d 	.word	0x0800284d

080028d8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <pxCurrentTCBConst2>)
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	6808      	ldr	r0, [r1, #0]
 80028de:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e2:	f380 8809 	msr	PSP, r0
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f380 8811 	msr	BASEPRI, r0
 80028f2:	4770      	bx	lr

080028f4 <pxCurrentTCBConst2>:
 80028f4:	20000fa4 	.word	0x20000fa4

080028f8 <vPortEnterCritical>:
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	b672      	cpsid	i
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <vPortEnterCritical+0x44>)
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002912:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002914:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002916:	d10f      	bne.n	8002938 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <vPortEnterCritical+0x48>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002920:	d00a      	beq.n	8002938 <vPortEnterCritical+0x40>
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	b672      	cpsid	i
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	b662      	cpsie	i
 8002936:	e7fe      	b.n	8002936 <vPortEnterCritical+0x3e>
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000010 	.word	0x20000010
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002944:	4a09      	ldr	r2, [pc, #36]	; (800296c <vPortExitCritical+0x28>)
 8002946:	6813      	ldr	r3, [r2, #0]
 8002948:	b953      	cbnz	r3, 8002960 <vPortExitCritical+0x1c>
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	b672      	cpsid	i
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	b662      	cpsie	i
 800295e:	e7fe      	b.n	800295e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8002960:	3b01      	subs	r3, #1
 8002962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002964:	b90b      	cbnz	r3, 800296a <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	4770      	bx	lr
 800296c:	20000010 	.word	0x20000010

08002970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002970:	f3ef 8009 	mrs	r0, PSP
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <pxCurrentTCBConst>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f01e 0f10 	tst.w	lr, #16
 8002980:	bf08      	it	eq
 8002982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800298a:	6010      	str	r0, [r2, #0]
 800298c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002994:	b672      	cpsid	i
 8002996:	f380 8811 	msr	BASEPRI, r0
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	b662      	cpsie	i
 80029a4:	f000 fc3a 	bl	800321c <vTaskSwitchContext>
 80029a8:	f04f 0000 	mov.w	r0, #0
 80029ac:	f380 8811 	msr	BASEPRI, r0
 80029b0:	bc08      	pop	{r3}
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	6808      	ldr	r0, [r1, #0]
 80029b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ba:	f01e 0f10 	tst.w	lr, #16
 80029be:	bf08      	it	eq
 80029c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029c4:	f380 8809 	msr	PSP, r0
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <pxCurrentTCBConst>:
 80029d0:	20000fa4 	.word	0x20000fa4

080029d4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029d4:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029d6:	f3ef 8311 	mrs	r3, BASEPRI
 80029da:	f04f 0250 	mov.w	r2, #80	; 0x50
 80029de:	b672      	cpsid	i
 80029e0:	f382 8811 	msr	BASEPRI, r2
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029ee:	f000 fa61 	bl	8002eb4 <xTaskIncrementTick>
 80029f2:	b118      	cbz	r0, 80029fc <xPortSysTickHandler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <xPortSysTickHandler+0x30>)
 80029fa:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029fc:	2300      	movs	r3, #0
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	bd08      	pop	{r3, pc}
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <vPortSetupTimerInterrupt+0x1c>)
 8002a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <vPortSetupTimerInterrupt+0x20>)
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <vPortSetupTimerInterrupt+0x24>)
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	e000e014 	.word	0xe000e014
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <xPortStartScheduler>:
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <xPortStartScheduler+0x90>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a32:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a34:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a36:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a40:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <xPortStartScheduler+0x94>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a52:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a54:	2207      	movs	r2, #7
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <xPortStartScheduler+0x98>)
 8002a58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a5a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002a5e:	1e54      	subs	r4, r2, #1
 8002a60:	0600      	lsls	r0, r0, #24
 8002a62:	d508      	bpl.n	8002a76 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	0052      	lsls	r2, r2, #1
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f88d 2003 	strb.w	r2, [sp, #3]
 8002a72:	4622      	mov	r2, r4
 8002a74:	e7f1      	b.n	8002a5a <xPortStartScheduler+0x2a>
 8002a76:	b101      	cbz	r1, 8002a7a <xPortStartScheduler+0x4a>
 8002a78:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	0212      	lsls	r2, r2, #8
 8002a7e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a82:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <xPortStartScheduler+0x90>)
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <xPortStartScheduler+0x9c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a9c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a9e:	f7ff ffb3 	bl	8002a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <xPortStartScheduler+0xa0>)
 8002aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002aa8:	f7ff fefc 	bl	80028a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <xPortStartScheduler+0xa4>)
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ab4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ab6:	f7ff fee5 	bl	8002884 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002aba:	f7ff fec7 	bl	800284c <prvTaskExitError>
 8002abe:	bf00      	nop
 8002ac0:	e000e400 	.word	0xe000e400
 8002ac4:	20000ea8 	.word	0x20000ea8
 8002ac8:	20000eac 	.word	0x20000eac
 8002acc:	e000ed20 	.word	0xe000ed20
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	e000ef34 	.word	0xe000ef34

08002ad8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002ad8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d910      	bls.n	8002b02 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002ae0:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <vPortValidateInterruptPriority+0x54>)
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <vPortValidateInterruptPriority+0x58>)
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d90a      	bls.n	8002b02 <vPortValidateInterruptPriority+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	b672      	cpsid	i
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	b662      	cpsie	i
 8002b00:	e7fe      	b.n	8002b00 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <vPortValidateInterruptPriority+0x5c>)
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <vPortValidateInterruptPriority+0x60>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d90a      	bls.n	8002b28 <vPortValidateInterruptPriority+0x50>
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	b672      	cpsid	i
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	b662      	cpsie	i
 8002b26:	e7fe      	b.n	8002b26 <vPortValidateInterruptPriority+0x4e>
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e3f0 	.word	0xe000e3f0
 8002b30:	20000ea8 	.word	0x20000ea8
 8002b34:	e000ed0c 	.word	0xe000ed0c
 8002b38:	20000eac 	.word	0x20000eac

08002b3c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b44:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b46:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b48:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4a:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b4c:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4e:	6003      	str	r3, [r0, #0]
 8002b50:	4770      	bx	lr

08002b52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	6103      	str	r3, [r0, #16]
 8002b56:	4770      	bx	lr

08002b58 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b58:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b5a:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b5c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b5e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b64:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002b66:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6003      	str	r3, [r0, #0]
 8002b6e:	4770      	bx	lr

08002b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b70:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b72:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b74:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b76:	d101      	bne.n	8002b7c <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b78:	6903      	ldr	r3, [r0, #16]
 8002b7a:	e007      	b.n	8002b8c <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7c:	f100 0308 	add.w	r3, r0, #8
 8002b80:	685c      	ldr	r4, [r3, #4]
 8002b82:	6825      	ldr	r5, [r4, #0]
 8002b84:	42aa      	cmp	r2, r5
 8002b86:	d301      	bcc.n	8002b8c <vListInsert+0x1c>
 8002b88:	4623      	mov	r3, r4
 8002b8a:	e7f9      	b.n	8002b80 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b90:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b92:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b94:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002b96:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b98:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	6003      	str	r3, [r0, #0]
 8002b9e:	bd30      	pop	{r4, r5, pc}

08002ba0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ba0:	6841      	ldr	r1, [r0, #4]
 8002ba2:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ba4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ba6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba8:	6882      	ldr	r2, [r0, #8]
 8002baa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bb0:	bf08      	it	eq
 8002bb2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	3801      	subs	r0, #1
 8002bbc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002bbe:	4770      	bx	lr

08002bc0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <prvResetNextTaskUnblockTime+0x1c>)
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <prvResetNextTaskUnblockTime+0x20>)
 8002bc8:	b911      	cbnz	r1, 8002bd0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bce:	e003      	b.n	8002bd8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	6852      	ldr	r2, [r2, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	4770      	bx	lr
 8002bdc:	20000ec4 	.word	0x20000ec4
 8002be0:	20000014 	.word	0x20000014

08002be4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <prvAddCurrentTaskToDelayedList+0x3c>)
 8002be6:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002be8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002bea:	6050      	str	r0, [r2, #4]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002bec:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <prvAddCurrentTaskToDelayedList+0x40>)
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4290      	cmp	r0, r2
 8002bf4:	d207      	bcs.n	8002c06 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <prvAddCurrentTaskToDelayedList+0x44>)
 8002bf8:	6810      	ldr	r0, [r2, #0]
 8002bfa:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002c00:	3104      	adds	r1, #4
 8002c02:	f7ff bfb5 	b.w	8002b70 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <prvAddCurrentTaskToDelayedList+0x48>)
 8002c08:	6810      	ldr	r0, [r2, #0]
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	3104      	adds	r1, #4
 8002c0e:	f7ff ffaf 	bl	8002b70 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <prvAddCurrentTaskToDelayedList+0x4c>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4294      	cmp	r4, r2
 8002c18:	d200      	bcs.n	8002c1c <prvAddCurrentTaskToDelayedList+0x38>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002c1a:	601c      	str	r4, [r3, #0]
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000fa4 	.word	0x20000fa4
 8002c24:	20000fbc 	.word	0x20000fbc
 8002c28:	20000fc0 	.word	0x20000fc0
 8002c2c:	20000ec4 	.word	0x20000ec4
 8002c30:	20000014 	.word	0x20000014

08002c34 <xTaskGenericCreate.part.4>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8002c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c3a:	4682      	mov	sl, r0
 8002c3c:	460f      	mov	r7, r1
 8002c3e:	4616      	mov	r6, r2
 8002c40:	469b      	mov	fp, r3
 8002c42:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c46:	b935      	cbnz	r5, 8002c56 <xTaskGenericCreate.part.4+0x22>
 8002c48:	0090      	lsls	r0, r2, #2
 8002c4a:	f7ff fdc9 	bl	80027e0 <pvPortMalloc>

		if( pxStack != NULL )
 8002c4e:	4605      	mov	r5, r0
 8002c50:	2800      	cmp	r0, #0
 8002c52:	f000 80a1 	beq.w	8002d98 <xTaskGenericCreate.part.4+0x164>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002c56:	2054      	movs	r0, #84	; 0x54
 8002c58:	f7ff fdc2 	bl	80027e0 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	b160      	cbz	r0, 8002c7a <xTaskGenericCreate.part.4+0x46>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c60:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8002c64:	6305      	str	r5, [r0, #48]	; 0x30
 8002c66:	1e7b      	subs	r3, r7, #1
 8002c68:	f100 0233 	add.w	r2, r0, #51	; 0x33
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c6c:	3e01      	subs	r6, #1
 8002c6e:	370f      	adds	r7, #15
 8002c70:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8002c74:	f025 0507 	bic.w	r5, r5, #7
 8002c78:	e005      	b.n	8002c86 <xTaskGenericCreate.part.4+0x52>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7ff fdd8 	bl	8002830 <vPortFree>
 8002c80:	e08a      	b.n	8002d98 <xTaskGenericCreate.part.4+0x164>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c82:	429f      	cmp	r7, r3
 8002c84:	d006      	beq.n	8002c94 <xTaskGenericCreate.part.4+0x60>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002c86:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002c8a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c8e:	7819      	ldrb	r1, [r3, #0]
 8002c90:	2900      	cmp	r1, #0
 8002c92:	d1f6      	bne.n	8002c82 <xTaskGenericCreate.part.4+0x4e>
 8002c94:	4647      	mov	r7, r8
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c96:	f04f 0900 	mov.w	r9, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002c9a:	1d26      	adds	r6, r4, #4
 8002c9c:	2f07      	cmp	r7, #7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c9e:	f884 9043 	strb.w	r9, [r4, #67]	; 0x43
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002ca2:	4630      	mov	r0, r6

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
 8002ca4:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 8002ca8:	bf28      	it	cs
 8002caa:	2707      	movcs	r7, #7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002cac:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002cae:	6467      	str	r7, [r4, #68]	; 0x44
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb0:	f1c7 0708 	rsb	r7, r7, #8
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002cb4:	f7ff ff4d 	bl	8002b52 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002cb8:	f104 0018 	add.w	r0, r4, #24
 8002cbc:	f7ff ff49 	bl	8002b52 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8002cc0:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002cc4:	6124      	str	r4, [r4, #16]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cc6:	465a      	mov	r2, fp
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc8:	61a7      	str	r7, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cca:	4651      	mov	r1, sl
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002ccc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cce:	4628      	mov	r0, r5
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8002cd0:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cd4:	f7ff fdf0 	bl	80028b8 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cda:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002cdc:	b103      	cbz	r3, 8002ce0 <xTaskGenericCreate.part.4+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cde:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002ce0:	f7ff fe0a 	bl	80028f8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <xTaskGenericCreate.part.4+0x16c>)
			if( pxCurrentTCB == NULL )
 8002ce6:	4d2f      	ldr	r5, [pc, #188]	; (8002da4 <xTaskGenericCreate.part.4+0x170>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002dd0 <xTaskGenericCreate.part.4+0x19c>
 8002cee:	3201      	adds	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002cf2:	682f      	ldr	r7, [r5, #0]
 8002cf4:	bb17      	cbnz	r7, 8002d3c <xTaskGenericCreate.part.4+0x108>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002cf6:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d126      	bne.n	8002d4c <xTaskGenericCreate.part.4+0x118>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cfe:	eb09 0007 	add.w	r0, r9, r7
 8002d02:	3714      	adds	r7, #20
 8002d04:	f7ff ff1a 	bl	8002b3c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d08:	2fa0      	cmp	r7, #160	; 0xa0
 8002d0a:	d1f8      	bne.n	8002cfe <xTaskGenericCreate.part.4+0xca>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002dd4 <xTaskGenericCreate.part.4+0x1a0>
	vListInitialise( &xDelayedTaskList2 );
 8002d10:	4f25      	ldr	r7, [pc, #148]	; (8002da8 <xTaskGenericCreate.part.4+0x174>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d12:	4650      	mov	r0, sl
 8002d14:	f7ff ff12 	bl	8002b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d18:	4638      	mov	r0, r7
 8002d1a:	f7ff ff0f 	bl	8002b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d1e:	4823      	ldr	r0, [pc, #140]	; (8002dac <xTaskGenericCreate.part.4+0x178>)
 8002d20:	f7ff ff0c 	bl	8002b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d24:	4822      	ldr	r0, [pc, #136]	; (8002db0 <xTaskGenericCreate.part.4+0x17c>)
 8002d26:	f7ff ff09 	bl	8002b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d2a:	4822      	ldr	r0, [pc, #136]	; (8002db4 <xTaskGenericCreate.part.4+0x180>)
 8002d2c:	f7ff ff06 	bl	8002b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <xTaskGenericCreate.part.4+0x184>)
 8002d32:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <xTaskGenericCreate.part.4+0x188>)
 8002d38:	601f      	str	r7, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <xTaskGenericCreate.part.4+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <xTaskGenericCreate.part.4+0x18c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b923      	cbnz	r3, 8002d4c <xTaskGenericCreate.part.4+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4598      	cmp	r8, r3
 8002d48:	d300      	bcc.n	8002d4c <xTaskGenericCreate.part.4+0x118>
					{
						pxCurrentTCB = pxNewTCB;
 8002d4a:	602c      	str	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <xTaskGenericCreate.part.4+0x190>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002d4e:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <xTaskGenericCreate.part.4+0x194>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002d56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d58:	2401      	movs	r4, #1
 8002d5a:	680b      	ldr	r3, [r1, #0]
 8002d5c:	fa04 f002 	lsl.w	r0, r4, r2
 8002d60:	4303      	orrs	r3, r0
 8002d62:	2014      	movs	r0, #20
 8002d64:	600b      	str	r3, [r1, #0]
 8002d66:	4631      	mov	r1, r6
 8002d68:	fb00 9002 	mla	r0, r0, r2, r9
 8002d6c:	f7ff fef4 	bl	8002b58 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002d70:	f7ff fde8 	bl	8002944 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <xTaskGenericCreate.part.4+0x18c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b15b      	cbz	r3, 8002d92 <xTaskGenericCreate.part.4+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	4598      	cmp	r8, r3
 8002d80:	d907      	bls.n	8002d92 <xTaskGenericCreate.part.4+0x15e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <xTaskGenericCreate.part.4+0x198>)
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002d92:	4620      	mov	r0, r4
 8002d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8002d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da0:	20000fdc 	.word	0x20000fdc
 8002da4:	20000fa4 	.word	0x20000fa4
 8002da8:	20000ee4 	.word	0x20000ee4
 8002dac:	20000fa8 	.word	0x20000fa8
 8002db0:	20000ed0 	.word	0x20000ed0
 8002db4:	20000eb0 	.word	0x20000eb0
 8002db8:	20000ec4 	.word	0x20000ec4
 8002dbc:	20000fc0 	.word	0x20000fc0
 8002dc0:	20000ec8 	.word	0x20000ec8
 8002dc4:	20000fc4 	.word	0x20000fc4
 8002dc8:	20000fe0 	.word	0x20000fe0
 8002dcc:	e000ed04 	.word	0xe000ed04
 8002dd0:	20000efc 	.word	0x20000efc
 8002dd4:	20000fc8 	.word	0x20000fc8

08002dd8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002dd8:	b470      	push	{r4, r5, r6}
 8002dda:	ac03      	add	r4, sp, #12
 8002ddc:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8002dde:	b950      	cbnz	r0, 8002df6 <xTaskGenericCreate+0x1e>
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	b672      	cpsid	i
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	b662      	cpsie	i
 8002df4:	e7fe      	b.n	8002df4 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8002df6:	2c07      	cmp	r4, #7
 8002df8:	d90a      	bls.n	8002e10 <xTaskGenericCreate+0x38>
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	b672      	cpsid	i
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	b662      	cpsie	i
 8002e0e:	e7fe      	b.n	8002e0e <xTaskGenericCreate+0x36>
 8002e10:	9605      	str	r6, [sp, #20]
 8002e12:	9504      	str	r5, [sp, #16]
 8002e14:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8002e16:	bc70      	pop	{r4, r5, r6}
 8002e18:	f7ff bf0c 	b.w	8002c34 <xTaskGenericCreate.part.4>

08002e1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e1e:	2400      	movs	r4, #0
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	4915      	ldr	r1, [pc, #84]	; (8002e78 <vTaskStartScheduler+0x5c>)
 8002e24:	9402      	str	r4, [sp, #8]
 8002e26:	4623      	mov	r3, r4
 8002e28:	9401      	str	r4, [sp, #4]
 8002e2a:	9400      	str	r4, [sp, #0]
 8002e2c:	4813      	ldr	r0, [pc, #76]	; (8002e7c <vTaskStartScheduler+0x60>)
 8002e2e:	f7ff ff01 	bl	8002c34 <xTaskGenericCreate.part.4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e32:	2801      	cmp	r0, #1
 8002e34:	d112      	bne.n	8002e5c <vTaskStartScheduler+0x40>
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	b672      	cpsid	i
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <vTaskStartScheduler+0x64>)
 8002e4c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <vTaskStartScheduler+0x68>)
 8002e50:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002e52:	b004      	add	sp, #16
 8002e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e58:	f7ff bdea 	b.w	8002a30 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002e5c:	b950      	cbnz	r0, 8002e74 <vTaskStartScheduler+0x58>
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	b672      	cpsid	i
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	b662      	cpsie	i
 8002e72:	e7fe      	b.n	8002e72 <vTaskStartScheduler+0x56>
	}
}
 8002e74:	b004      	add	sp, #16
 8002e76:	bd10      	pop	{r4, pc}
 8002e78:	08004ef1 	.word	0x08004ef1
 8002e7c:	080031a5 	.word	0x080031a5
 8002e80:	20000ec8 	.word	0x20000ec8
 8002e84:	20000fbc 	.word	0x20000fbc

08002e88 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <vTaskSuspendAll+0xc>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000f9c 	.word	0x20000f9c

08002e98 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <xTaskGetTickCount+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000fbc 	.word	0x20000fbc

08002ea4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ea4:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea6:	f7ff fe17 	bl	8002ad8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
 8002eaa:	4b01      	ldr	r3, [pc, #4]	; (8002eb0 <xTaskGetTickCountFromISR+0xc>)
 8002eac:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8002eae:	bd08      	pop	{r3, pc}
 8002eb0:	20000fbc 	.word	0x20000fbc

08002eb4 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <xTaskIncrementTick+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d13e      	bne.n	8002f3e <xTaskIncrementTick+0x8a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <xTaskIncrementTick+0x10c>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002ec8:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8002eca:	b9cd      	cbnz	r5, 8002f00 <xTaskIncrementTick+0x4c>
			{
				taskSWITCH_DELAYED_LISTS();
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <xTaskIncrementTick+0x110>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	b152      	cbz	r2, 8002eea <xTaskIncrementTick+0x36>
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	b672      	cpsid	i
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	b662      	cpsie	i
 8002ee8:	e7fe      	b.n	8002ee8 <xTaskIncrementTick+0x34>
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <xTaskIncrementTick+0x114>)
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	6810      	ldr	r0, [r2, #0]
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	6011      	str	r1, [r2, #0]
 8002ef4:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <xTaskIncrementTick+0x118>)
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	f7ff fe60 	bl	8002bc0 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002f00:	4c33      	ldr	r4, [pc, #204]	; (8002fd0 <xTaskIncrementTick+0x11c>)
 8002f02:	f04f 0b00 	mov.w	fp, #0
 8002f06:	4e33      	ldr	r6, [pc, #204]	; (8002fd4 <xTaskIncrementTick+0x120>)
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	9401      	str	r4, [sp, #4]
 8002f0c:	429d      	cmp	r5, r3
 8002f0e:	4f32      	ldr	r7, [pc, #200]	; (8002fd8 <xTaskIncrementTick+0x124>)
 8002f10:	d30b      	bcc.n	8002f2a <xTaskIncrementTick+0x76>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f12:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002fc4 <xTaskIncrementTick+0x110>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002f16:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002fe4 <xTaskIncrementTick+0x130>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1a:	f8d8 2000 	ldr.w	r2, [r8]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	b9a2      	cbnz	r2, 8002f4c <xTaskIncrementTick+0x98>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f26:	9b01      	ldr	r3, [sp, #4]
 8002f28:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f2e:	2214      	movs	r2, #20
 8002f30:	434a      	muls	r2, r1
 8002f32:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8002f34:	2a02      	cmp	r2, #2
 8002f36:	bf28      	it	cs
 8002f38:	f04f 0b01 	movcs.w	fp, #1
 8002f3c:	e034      	b.n	8002fa8 <xTaskIncrementTick+0xf4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f3e:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <xTaskIncrementTick+0x128>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f40:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e02d      	b.n	8002fa8 <xTaskIncrementTick+0xf4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f4c:	f8d8 2000 	ldr.w	r2, [r8]
 8002f50:	68d2      	ldr	r2, [r2, #12]
 8002f52:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002f54:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8002f56:	428d      	cmp	r5, r1
 8002f58:	d202      	bcs.n	8002f60 <xTaskIncrementTick+0xac>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8002f5a:	9b01      	ldr	r3, [sp, #4]
 8002f5c:	6019      	str	r1, [r3, #0]
							break;
 8002f5e:	e7e4      	b.n	8002f2a <xTaskIncrementTick+0x76>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002f60:	f104 0a04 	add.w	sl, r4, #4
 8002f64:	4650      	mov	r0, sl
 8002f66:	f7ff fe1b 	bl	8002ba0 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f6c:	b119      	cbz	r1, 8002f76 <xTaskIncrementTick+0xc2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f6e:	f104 0018 	add.w	r0, r4, #24
 8002f72:	f7ff fe15 	bl	8002ba0 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002f76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f8d9 1000 	ldr.w	r1, [r9]
 8002f7e:	fa03 fe00 	lsl.w	lr, r3, r0
 8002f82:	ea4e 0101 	orr.w	r1, lr, r1
 8002f86:	f04f 0e14 	mov.w	lr, #20
 8002f8a:	f8c9 1000 	str.w	r1, [r9]
 8002f8e:	4651      	mov	r1, sl
 8002f90:	fb0e 6000 	mla	r0, lr, r0, r6
 8002f94:	f7ff fde0 	bl	8002b58 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f98:	6838      	ldr	r0, [r7, #0]
 8002f9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f9c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8002f9e:	4291      	cmp	r1, r2
 8002fa0:	bf28      	it	cs
 8002fa2:	f04f 0b01 	movcs.w	fp, #1
 8002fa6:	e7b8      	b.n	8002f1a <xTaskIncrementTick+0x66>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <xTaskIncrementTick+0x12c>)
 8002faa:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	bf18      	it	ne
 8002fb0:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002fb4:	4658      	mov	r0, fp
 8002fb6:	b003      	add	sp, #12
 8002fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbc:	20000f9c 	.word	0x20000f9c
 8002fc0:	20000fbc 	.word	0x20000fbc
 8002fc4:	20000ec4 	.word	0x20000ec4
 8002fc8:	20000fc0 	.word	0x20000fc0
 8002fcc:	20000fa0 	.word	0x20000fa0
 8002fd0:	20000014 	.word	0x20000014
 8002fd4:	20000efc 	.word	0x20000efc
 8002fd8:	20000fa4 	.word	0x20000fa4
 8002fdc:	20000ef8 	.word	0x20000ef8
 8002fe0:	20000fe4 	.word	0x20000fe4
 8002fe4:	20000fe0 	.word	0x20000fe0

08002fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fec:	4c31      	ldr	r4, [pc, #196]	; (80030b4 <xTaskResumeAll+0xcc>)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	b953      	cbnz	r3, 8003008 <xTaskResumeAll+0x20>
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	b672      	cpsid	i
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	b662      	cpsie	i
 8003006:	e7fe      	b.n	8003006 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003008:	f7ff fc76 	bl	80028f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	b10b      	cbz	r3, 800301a <xTaskResumeAll+0x32>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003016:	2400      	movs	r4, #0
 8003018:	e047      	b.n	80030aa <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <xTaskResumeAll+0xd0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f9      	beq.n	8003016 <xTaskResumeAll+0x2e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003022:	4d26      	ldr	r5, [pc, #152]	; (80030bc <xTaskResumeAll+0xd4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003024:	4e26      	ldr	r6, [pc, #152]	; (80030c0 <xTaskResumeAll+0xd8>)
 8003026:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80030d4 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	b303      	cbz	r3, 8003070 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800302e:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003030:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003032:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003034:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003038:	f104 0018 	add.w	r0, r4, #24
 800303c:	f7ff fdb0 	bl	8002ba0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003040:	4648      	mov	r0, r9
 8003042:	f7ff fdad 	bl	8002ba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003046:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	2014      	movs	r0, #20
 800304c:	fa07 f102 	lsl.w	r1, r7, r2
 8003050:	fb00 8002 	mla	r0, r0, r2, r8
 8003054:	430b      	orrs	r3, r1
 8003056:	4649      	mov	r1, r9
 8003058:	6033      	str	r3, [r6, #0]
 800305a:	f7ff fd7d 	bl	8002b58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <xTaskResumeAll+0xdc>)
 8003060:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d3df      	bcc.n	800302a <xTaskResumeAll+0x42>
					{
						xYieldPending = pdTRUE;
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <xTaskResumeAll+0xe0>)
 800306c:	601f      	str	r7, [r3, #0]
 800306e:	e7da      	b.n	8003026 <xTaskResumeAll+0x3e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003070:	4c16      	ldr	r4, [pc, #88]	; (80030cc <xTaskResumeAll+0xe4>)
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	b963      	cbnz	r3, 8003090 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <xTaskResumeAll+0xe0>)
 8003078:	681c      	ldr	r4, [r3, #0]
 800307a:	2c01      	cmp	r4, #1
 800307c:	d1cb      	bne.n	8003016 <xTaskResumeAll+0x2e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <xTaskResumeAll+0xe8>)
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	e00c      	b.n	80030aa <xTaskResumeAll+0xc2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8003090:	4d0d      	ldr	r5, [pc, #52]	; (80030c8 <xTaskResumeAll+0xe0>)
 8003092:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ed      	beq.n	8003076 <xTaskResumeAll+0x8e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800309a:	f7ff ff0b 	bl	8002eb4 <xTaskIncrementTick>
 800309e:	b100      	cbz	r0, 80030a2 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80030a0:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	e7f4      	b.n	8003094 <xTaskResumeAll+0xac>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030aa:	f7ff fc4b 	bl	8002944 <vPortExitCritical>

	return xAlreadyYielded;
}
 80030ae:	4620      	mov	r0, r4
 80030b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b4:	20000f9c 	.word	0x20000f9c
 80030b8:	20000fdc 	.word	0x20000fdc
 80030bc:	20000fa8 	.word	0x20000fa8
 80030c0:	20000fe0 	.word	0x20000fe0
 80030c4:	20000fa4 	.word	0x20000fa4
 80030c8:	20000fe4 	.word	0x20000fe4
 80030cc:	20000ef8 	.word	0x20000ef8
 80030d0:	e000ed04 	.word	0xe000ed04
 80030d4:	20000efc 	.word	0x20000efc

080030d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80030d8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 80030da:	b950      	cbnz	r0, 80030f2 <vTaskDelayUntil+0x1a>
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	b672      	cpsid	i
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	b662      	cpsie	i
 80030f0:	e7fe      	b.n	80030f0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80030f2:	b951      	cbnz	r1, 800310a <vTaskDelayUntil+0x32>
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	b672      	cpsid	i
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	b662      	cpsie	i
 8003108:	e7fe      	b.n	8003108 <vTaskDelayUntil+0x30>
		configASSERT( uxSchedulerSuspended == 0 );
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <vTaskDelayUntil+0xb8>)
 800310c:	681d      	ldr	r5, [r3, #0]
 800310e:	b155      	cbz	r5, 8003126 <vTaskDelayUntil+0x4e>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	b672      	cpsid	i
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	b662      	cpsie	i
 8003124:	e7fe      	b.n	8003124 <vTaskDelayUntil+0x4c>

		vTaskSuspendAll();
 8003126:	f7ff feaf 	bl	8002e88 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <vTaskDelayUntil+0xbc>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800312c:	6802      	ldr	r2, [r0, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800312e:	681b      	ldr	r3, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003130:	188c      	adds	r4, r1, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 8003132:	4293      	cmp	r3, r2
 8003134:	d202      	bcs.n	800313c <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003136:	42a2      	cmp	r2, r4
 8003138:	d907      	bls.n	800314a <vTaskDelayUntil+0x72>
 800313a:	e001      	b.n	8003140 <vTaskDelayUntil+0x68>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800313c:	42a2      	cmp	r2, r4
 800313e:	d806      	bhi.n	800314e <vTaskDelayUntil+0x76>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003140:	42a3      	cmp	r3, r4
 8003142:	bf2c      	ite	cs
 8003144:	2300      	movcs	r3, #0
 8003146:	2301      	movcc	r3, #1
 8003148:	e002      	b.n	8003150 <vTaskDelayUntil+0x78>
 800314a:	462b      	mov	r3, r5
 800314c:	e000      	b.n	8003150 <vTaskDelayUntil+0x78>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 800314e:	2301      	movs	r3, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003150:	6004      	str	r4, [r0, #0]

			if( xShouldDelay != pdFALSE )
 8003152:	b18b      	cbz	r3, 8003178 <vTaskDelayUntil+0xa0>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003154:	4d10      	ldr	r5, [pc, #64]	; (8003198 <vTaskDelayUntil+0xc0>)
 8003156:	6828      	ldr	r0, [r5, #0]
 8003158:	3004      	adds	r0, #4
 800315a:	f7ff fd21 	bl	8002ba0 <uxListRemove>
 800315e:	b940      	cbnz	r0, 8003172 <vTaskDelayUntil+0x9a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	490e      	ldr	r1, [pc, #56]	; (800319c <vTaskDelayUntil+0xc4>)
 8003164:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003166:	2301      	movs	r3, #1
 8003168:	680a      	ldr	r2, [r1, #0]
 800316a:	4083      	lsls	r3, r0
 800316c:	ea22 0303 	bic.w	r3, r2, r3
 8003170:	600b      	str	r3, [r1, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff fd36 	bl	8002be4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003178:	f7ff ff36 	bl	8002fe8 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800317c:	b938      	cbnz	r0, 800318e <vTaskDelayUntil+0xb6>
		{
			portYIELD_WITHIN_API();
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <vTaskDelayUntil+0xc8>)
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000f9c 	.word	0x20000f9c
 8003194:	20000fbc 	.word	0x20000fbc
 8003198:	20000fa4 	.word	0x20000fa4
 800319c:	20000fe0 	.word	0x20000fe0
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80031a4:	4d18      	ldr	r5, [pc, #96]	; (8003208 <prvIdleTask+0x64>)
 80031a6:	462e      	mov	r6, r5
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80031aa:	4f18      	ldr	r7, [pc, #96]	; (800320c <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b1f3      	cbz	r3, 80031ee <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 80031b0:	f7ff fe6a 	bl	8002e88 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80031b4:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 80031b6:	f7ff ff17 	bl	8002fe8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	d0f6      	beq.n	80031ac <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80031be:	f7ff fb9b 	bl	80028f8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <prvIdleTask+0x68>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80031c8:	1d20      	adds	r0, r4, #4
 80031ca:	f7ff fce9 	bl	8002ba0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <prvIdleTask+0x6c>)
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80031d6:	6833      	ldr	r3, [r6, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 80031dc:	f7ff fbb2 	bl	8002944 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80031e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80031e2:	f7ff fb25 	bl	8002830 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff fb22 	bl	8002830 <vPortFree>
 80031ec:	e7de      	b.n	80031ac <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <prvIdleTask+0x70>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d9d9      	bls.n	80031aa <prvIdleTask+0x6>
			{
				taskYIELD();
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <prvIdleTask+0x74>)
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	e7d0      	b.n	80031aa <prvIdleTask+0x6>
 8003208:	20000ecc 	.word	0x20000ecc
 800320c:	20000ed0 	.word	0x20000ed0
 8003210:	20000fdc 	.word	0x20000fdc
 8003214:	20000efc 	.word	0x20000efc
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800321c:	4b18      	ldr	r3, [pc, #96]	; (8003280 <vTaskSwitchContext+0x64>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003222:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003224:	b10a      	cbz	r2, 800322a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003226:	2201      	movs	r2, #1
 8003228:	e027      	b.n	800327a <vTaskSwitchContext+0x5e>
	}
	else
	{
		xYieldPending = pdFALSE;
 800322a:	601a      	str	r2, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <vTaskSwitchContext+0x6c>)
 800322e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2214      	movs	r2, #20
 8003238:	4914      	ldr	r1, [pc, #80]	; (800328c <vTaskSwitchContext+0x70>)
 800323a:	f1c3 031f 	rsb	r3, r3, #31
 800323e:	435a      	muls	r2, r3
 8003240:	588c      	ldr	r4, [r1, r2]
 8003242:	1888      	adds	r0, r1, r2
 8003244:	b954      	cbnz	r4, 800325c <vTaskSwitchContext+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	b672      	cpsid	i
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	b662      	cpsie	i
 800325a:	e7fe      	b.n	800325a <vTaskSwitchContext+0x3e>
 800325c:	6844      	ldr	r4, [r0, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	6864      	ldr	r4, [r4, #4]
 8003262:	440a      	add	r2, r1
 8003264:	4294      	cmp	r4, r2
 8003266:	6044      	str	r4, [r0, #4]
 8003268:	bf04      	itt	eq
 800326a:	6862      	ldreq	r2, [r4, #4]
 800326c:	6042      	streq	r2, [r0, #4]
 800326e:	2214      	movs	r2, #20
 8003270:	fb02 1303 	mla	r3, r2, r3, r1
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <vTaskSwitchContext+0x74>)
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	bd10      	pop	{r4, pc}
 800327e:	bf00      	nop
 8003280:	20000f9c 	.word	0x20000f9c
 8003284:	20000fe4 	.word	0x20000fe4
 8003288:	20000fe0 	.word	0x20000fe0
 800328c:	20000efc 	.word	0x20000efc
 8003290:	20000fa4 	.word	0x20000fa4

08003294 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <xTaskGetSchedulerState+0x18>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b133      	cbz	r3, 80032a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskGetSchedulerState+0x1c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032a0:	bf0c      	ite	eq
 80032a2:	2002      	moveq	r0, #2
 80032a4:	2000      	movne	r0, #0
 80032a6:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032a8:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80032aa:	4770      	bx	lr
 80032ac:	20000ec8 	.word	0x20000ec8
 80032b0:	20000f9c 	.word	0x20000f9c

080032b4 <__libc_init_array>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4e0f      	ldr	r6, [pc, #60]	; (80032f4 <__libc_init_array+0x40>)
 80032b8:	4d0f      	ldr	r5, [pc, #60]	; (80032f8 <__libc_init_array+0x44>)
 80032ba:	1b76      	subs	r6, r6, r5
 80032bc:	10b6      	asrs	r6, r6, #2
 80032be:	bf18      	it	ne
 80032c0:	2400      	movne	r4, #0
 80032c2:	d005      	beq.n	80032d0 <__libc_init_array+0x1c>
 80032c4:	3401      	adds	r4, #1
 80032c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ca:	4798      	blx	r3
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d1f9      	bne.n	80032c4 <__libc_init_array+0x10>
 80032d0:	4e0a      	ldr	r6, [pc, #40]	; (80032fc <__libc_init_array+0x48>)
 80032d2:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x4c>)
 80032d4:	1b76      	subs	r6, r6, r5
 80032d6:	f000 f88b 	bl	80033f0 <_init>
 80032da:	10b6      	asrs	r6, r6, #2
 80032dc:	bf18      	it	ne
 80032de:	2400      	movne	r4, #0
 80032e0:	d006      	beq.n	80032f0 <__libc_init_array+0x3c>
 80032e2:	3401      	adds	r4, #1
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	42a6      	cmp	r6, r4
 80032ec:	d1f9      	bne.n	80032e2 <__libc_init_array+0x2e>
 80032ee:	bd70      	pop	{r4, r5, r6, pc}
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	bf00      	nop
 80032f4:	08004f00 	.word	0x08004f00
 80032f8:	08004f00 	.word	0x08004f00
 80032fc:	08004f08 	.word	0x08004f08
 8003300:	08004f00 	.word	0x08004f00

08003304 <register_fini>:
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <register_fini+0xc>)
 8003306:	b113      	cbz	r3, 800330e <register_fini+0xa>
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <register_fini+0x10>)
 800330a:	f000 b805 	b.w	8003318 <atexit>
 800330e:	4770      	bx	lr
 8003310:	00000000 	.word	0x00000000
 8003314:	08003325 	.word	0x08003325

08003318 <atexit>:
 8003318:	2300      	movs	r3, #0
 800331a:	4601      	mov	r1, r0
 800331c:	461a      	mov	r2, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 b814 	b.w	800334c <__register_exitproc>

08003324 <__libc_fini_array>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4d07      	ldr	r5, [pc, #28]	; (8003344 <__libc_fini_array+0x20>)
 8003328:	4c07      	ldr	r4, [pc, #28]	; (8003348 <__libc_fini_array+0x24>)
 800332a:	1b2c      	subs	r4, r5, r4
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	d005      	beq.n	800333c <__libc_fini_array+0x18>
 8003330:	3c01      	subs	r4, #1
 8003332:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003336:	4798      	blx	r3
 8003338:	2c00      	cmp	r4, #0
 800333a:	d1f9      	bne.n	8003330 <__libc_fini_array+0xc>
 800333c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003340:	f000 b85c 	b.w	80033fc <_fini>
 8003344:	08004f0c 	.word	0x08004f0c
 8003348:	08004f08 	.word	0x08004f08

0800334c <__register_exitproc>:
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	4c25      	ldr	r4, [pc, #148]	; (80033e8 <__register_exitproc+0x9c>)
 8003352:	6825      	ldr	r5, [r4, #0]
 8003354:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8003358:	4606      	mov	r6, r0
 800335a:	4688      	mov	r8, r1
 800335c:	4692      	mov	sl, r2
 800335e:	4699      	mov	r9, r3
 8003360:	b3c4      	cbz	r4, 80033d4 <__register_exitproc+0x88>
 8003362:	6860      	ldr	r0, [r4, #4]
 8003364:	281f      	cmp	r0, #31
 8003366:	dc17      	bgt.n	8003398 <__register_exitproc+0x4c>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	b176      	cbz	r6, 800338a <__register_exitproc+0x3e>
 800336c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003370:	2201      	movs	r2, #1
 8003372:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8003376:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800337a:	4082      	lsls	r2, r0
 800337c:	4311      	orrs	r1, r2
 800337e:	2e02      	cmp	r6, #2
 8003380:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8003384:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8003388:	d01e      	beq.n	80033c8 <__register_exitproc+0x7c>
 800338a:	3002      	adds	r0, #2
 800338c:	6063      	str	r3, [r4, #4]
 800338e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8003392:	2000      	movs	r0, #0
 8003394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <__register_exitproc+0xa0>)
 800339a:	b303      	cbz	r3, 80033de <__register_exitproc+0x92>
 800339c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033a0:	f3af 8000 	nop.w
 80033a4:	4604      	mov	r4, r0
 80033a6:	b1d0      	cbz	r0, 80033de <__register_exitproc+0x92>
 80033a8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80033ac:	2700      	movs	r7, #0
 80033ae:	e880 0088 	stmia.w	r0, {r3, r7}
 80033b2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80033b6:	4638      	mov	r0, r7
 80033b8:	2301      	movs	r3, #1
 80033ba:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80033be:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	d0e1      	beq.n	800338a <__register_exitproc+0x3e>
 80033c6:	e7d1      	b.n	800336c <__register_exitproc+0x20>
 80033c8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80033cc:	430a      	orrs	r2, r1
 80033ce:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80033d2:	e7da      	b.n	800338a <__register_exitproc+0x3e>
 80033d4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80033d8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80033dc:	e7c1      	b.n	8003362 <__register_exitproc+0x16>
 80033de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e6:	bf00      	nop
 80033e8:	08004efc 	.word	0x08004efc
 80033ec:	00000000 	.word	0x00000000

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
